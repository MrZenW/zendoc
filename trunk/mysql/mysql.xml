<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
  <bookinfo>
    <title>z.En MySQL 文档</title>

    <author>
      <firstname>z.En</firstname>
      <surname>zen wong</surname>
      <lineage>王振宇</lineage>
      <affiliation>
        <address><email>w@zenw.org</email>

	Web site:<ulink url='http://www.zenw.org'>http://www.zenw.org</ulink></address>
      </affiliation>
    </author>

    <copyright>
      <year>2009</year>
      <year>2010</year>
      <holder>王振宇</holder>
	<holder>http://www.zenw.org</holder>
    </copyright>
   <releaseinfo>
	<para>版本 2009-12-18</para>
	<para>
		<screen>
转载请与作者联系，转载时请务必标明文章原始出处和作者信息及本声明。

文档最近一次更新于 2010-02-05 16:37
		</screen>
	</para>
   </releaseinfo>

    <abstract>
      <para>MYSQL是一个快速高效的关系数据库</para>
    </abstract>
  </bookinfo>

  <preface>
    <title>序言</title>

	<para>
这是一个最多WEB使用的数据库

	</para>
  </preface>

  <chapter>
    <title>Installation</title>

    <para>安装MYSQL是很简单的事情</para>

    <section>
      <title>安装已编译版本</title>
      		<screen>
解压mysql发行包:
[root@localhost src]# tar -zxvf mysql-5.1.42-linux-i686-glibc23.tar.gz 
--

拷贝mysql文件到软件目录中:
[root@localhost src]# cp -rf /usr/src/mysql-5.1.42-linux-i686-glibc23/* /usr/local/mysql-5.1.42 
--

为其建立软连接
[root@localhost src]# ln -s /usr/local/mysql-5.1.42 /usr/local/mysql
--

创建mysql用户组
[root@localhost src]# groupadd mysql
--

创建mysql用户,并添加到mysql用户组中
[root@localhost src]# useradd -g mysql mysql
--

更改mysql目录的所属用户和所属组
将软件目录中的mysql目录以及其下所有文件的所属者改为mysql用户,所属组改为mysql用户组

[root@localhost src]# chown mysql.mysql -R /usr/local/mysql

或

[root@localhost src]# chown mysql -R /usr/local/mysql

[root@localhost src]# chgrp mysql -R /usr/local/mysql
--

执行脚本初始化数据库和配置

先进入软件目录中的mysql目录中,此步是必须的,因为下面的脚本存在目录相对定位的BUG,否则脚本会找不到他需要的文件

[root@localhost src]# cd /usr/local/mysql

然后执行脚本

[root@localhost src]# scripts/mysql_install_db 

<note>
如果之前已经安装过mysql ,可能需要将mysql的配置文件,/etc/mysql/ 下的 my.cnf删除

参数介绍

--user 数据库文件所有者
--basedir mysql的安装目录
--datadir mysql数据库文件目录 

附加操作：最好在这一步完成以后再为软件目录中的mysql文件夹及其子目录修改一下所属者，详细命令见步骤：“更改mysql目录的所属用户和所属组” 
</note>
--

添加mysqld到/etc/init.d/下
将/usr/local/mysql/support-files/下的mysql.server 拷贝到/etc/init.d/下，命名为 mysqld

[root@localhost src]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld
--

添加mysql配置文件my.cnf到/etc/mysql/下
将/usr/local/mysql/support-files/下的my-medium.cnf 拷贝到/etc/mysql/下，命名为 my.cnf

[root@localhost src]# cp /usr/local/mysql/support-files/my-medium.cnf /etc/mysql/my.cnf
--

启动mysql

[root@localhost src]# service mysqld start

通过netstat -atln命令查看3306端口如果被站用，说明启动成功
--

初始化mysql的root用户密码
[root@localhost src]# /usr/local/mysql/bin/mysqladmin -u root password "新的密码"
--

把mysql加入PATH(环境变量)中
编辑/etc/profile 文件,把mysql加入PATH(环境变量)中
在/etc/profile中加入 
#set mysql export PATH=/usr/local/mysql/bin:$PATH
--

		</screen>
    </section>
    <sect1>
	<title>异常的解决</title>
	<para>
		启动服务时错误:
	</para>
	<para>
	错误日志:
	</para>
	<screen>
	080724 16:50:23 [ERROR] /usr/libexec/mysqld: Can't find file: './mysql/host.frm' (errno: 13)
	080724 16:50:23 [ERROR] /usr/libexec/mysqld: Can't find file: './mysql/host.frm' (errno: 13)
	080724 16:50:23 [ERROR] Fatal error: Can't open and lock privilege tables: Can't find file: './mysql/host.frm' (errno: 13)
	080724 16:50:23 mysqld ended

	</screen>
	<para>
	解决方法:
	</para>
	<para>
	重新运行一次 mysql_install_db，重设一次权限，此问题是mysql的一些文件丢失或所属者不是mysql
	</para>
	<para>
	--
	</para>
    </sect1>
  </chapter>

  <chapter>
    <title>mysqldump</title>

    <para>导入导出和备份</para>

    <section>
      <title>导出</title>
      		<screen>
导出整个数据库

mysqldump -u 用户名 -p 数据库名 > 导出的文件名 mysqldump -u root -p student >d:\student.sql 
--

导出一个数据库结构

mysqldump -u root -p -d --add-drop-table student >d:\student_structure.sql -d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table
--

导出一个表

mysqldump -u 用户名 -p 数据库名 表名> 导出的文件名 mysqldump -u root -p schoolproject student>d:\schoolproject_student.sql 
--
		</screen>
    </section>
    <section>
	<title>导入</title>
		<screen>
导入数据库

shell&gt; mysqladmin –u root –p create target_db_name shell> mysql –u root –p target_db_name &lt; backup-file.sql 
就是:shell> mysql 数据库名 &lt; 文件名


或者使用source 命令进入mysql数据库控制台，mysql -u root –p


mysql>use 数据库然后使用source命令，后面参数为脚本文件（.sql文件） mysql>source d:\student.sql 
--
		</screen>
    </section>
  </chapter>
	<chapter>
		<title>basic use</title>
		<para>基本使用</para>
		<section>
			<title>INSERT</title>
			<screen><![CDATA[
INSERT [LOW_PRIORITY |DELAYED| HIGH_PRIORITY] [IGNORE]      [INTO]tbl_name[(col_name,...)]      VALUES ({expr| DEFAULT},...),(...),...      [ON DUPLICATE KEY UPDATEcol_name=expr, ... ]或：

INSERT [LOW_PRIORITY |DELAYED| HIGH_PRIORITY] [IGNORE]      [INTO]tbl_name      SETcol_name={expr| DEFAULT}, ...      [ON DUPLICATE KEY UPDATEcol_name=expr, ... ]或：

INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]      [INTO]tbl_name[(col_name,...)]      SELECT ...      [ON DUPLICATE KEY UPDATEcol_name=expr, ... ]
一、DELAYED的使用    使用延迟插入操作DELAYED调节符应用于INSERT和REPLACE语句。当DELAYED插入操作到达的时候，服务器把数据行放入一个队列中，并立即给客户端返回一个状态信息，这样客户端就可以在数据表被真正地插入记录之前继续进行操作了。如果读取者从该数据表中读取数据，队列中的数据就会被保持着，直到没有读取者为止。接着服务器开始插入延迟数据行（delayed-row）队列中的数据行。
在插入操作的同时，服务器还要检查是否有新的读取请求到达和等待。如果有，延迟数据行队列就被挂起，允许读取者继续操作。当没有读取者的时候，服务器再次开始插入延迟的数据行。这个过程一直进行，直到队列空了为止。几点要注意事项：· INSERT DELAYED应该仅用于指定值清单的INSERT语句。服务器忽略用于INSERT DELAYED...SELECT语句的DELAYED。· 服务器忽略用于INSERT DELAYED...ON DUPLICATE UPDATE语句的DELAYED。· 因为在行被插入前，语句立刻返回，所以您不能使用LAST_INSERT_ID()来获取AUTO_INCREMENT值。AUTO_INCREMENT值可能由语句生成。· 对于SELECT语句，DELAYED行不可见，直到这些行确实被插入了为止。· DELAYED在从属复制服务器中被忽略了，因为DELAYED不会在从属服务器中产生与主服务器不一样的数据。注意，目前在队列中的各行只保存在存储器中，直到它们被插入到表中为止。这意味着，如果您强行中止了mysqld（例如，使用kill -9）或者如果mysqld意外停止，则所有没有被写入磁盘的行都会丢失。二、IGNORE的使用IGNORE是MySQL相对于标准SQL的扩展。如果在新表中有重复关键字，或者当STRICT模式启动后出现警告，则使用IGNORE控制ALTER TABLE的运行。如果没有指定IGNORE，当重复关键字错误发生时，复制操作被放弃，返回前一步骤。如果指定了IGNORE，则对于有重复关键字的行，只使用第一行，其它有冲突的行被删除。并且，对错误值进行修正，使之尽量接近正确值。insert ignore into tb(...) value(...)这样不用校验是否存在了，有则忽略，无则添加三、ON DUPLICATE KEY UPDATE的使用如果您指定了ON DUPLICATE KEY UPDATE，并且插入行后会导致在一个UNIQUE索引或PRIMARY KEY中出现重复值，则执行旧行UPDATE。例如，如果列a被定义为UNIQUE，并且包含值1，则以下两个语句具有相同的效果：mysql>INSERT INTO table (a,b,c) VALUES (1,2,3)      ->ON DUPLICATE KEY UPDATE c=c+1;mysql>UPDATE table SET c=c+1 WHERE a=1;如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。注释：如果列b也是唯一列，则INSERT与此UPDATE语句相当：mysql>UPDATE table SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;如果a=1 OR b=2与多个行向匹配，则只有一个行被更新。通常，您应该尽量避免对带有多个唯一关键字的表使用ON DUPLICATE KEY子句。您可以在UPDATE子句中使用VALUES(col_name)函数从INSERT...UPDATE语句的INSERT部分引用列值。换句话说，如果没有发生重复关键字冲突，则UPDATE子句中的VALUES(col_name)可以引用被插入的col_name的值。本函数特别适用于多行插入。VALUES()函数只在INSERT...UPDATE语句中有意义，其它时候会返回NULL。示例：mysql>INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)      ->ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);本语句与以下两个语句作用相同：mysql>INSERT INTO table (a,b,c) VALUES (1,2,3)      ->ON DUPLICATE KEY UPDATE c=3;mysql>INSERT INTO table (a,b,c) VALUES (4,5,6)      ->ON DUPLICATE KEY UPDATE c=9;当您使用ON DUPLICATE KEY UPDATE时，DELAYED选项被忽略。总结：DELAYED 做为快速插入，并不是很关心失效性，提高插入性能。       ignore    只关注主键对应记录是不存在，无则添加，有则忽略。     ON DUPLICATE KEY UPDATE 在添加时操作，关注非主键列，注意与ignore的区别。有则更新指定列，无则添加。 mysql下的insert/replace/update/deleteINSERT和REPLACE语句的功能都是向表中插入新的数据。这两条语句的语法类似。它们的主要区别是如何处理重复的数据。
]]>
			</screen>
		</section>

		<sect1>
		<title>
		INSERT的一般用法
		</title>
		<screen>
　　MySQL中的INSERT语句和标准的INSERT不太一样，在标准的SQL语句中，一次插入一条记录的INSERT语句只有一种形式。

　　INSERT INTO tablename(列名…) VALUES(列值);

　　而在MySQL中还有另外一种形式。

　　INSERT INTO tablename SET column_name1 = value1, column_name2 = value2，…;

　　第一种方法将列名和列值分开了，在使用时，列名必须和列值的数一致。如下面的语句向users表中插入了一条记录：

　　INSERT INTO users(id, name, age) VALUES(123, '姚明', 25);

　　第二种方法允许列名和列值成对出现和使用，如下面的语句将产生中样的效果。

　　INSERT INTO users SET id = 123, name = '姚明', age = 25;

　　如果使用了SET方式，必须至少为一列赋值。如果某一个字段使用了省缺值（如默认或自增值），这两种方法都可以省略这些字段。如id字段上使用了自增值，上面两条语句可以写成如下形式：

　　INSERT INTO users (name, age) VALUES('姚明',25);

　　INSERT INTO uses SET name = '姚明', age = 25;

　　MySQL在VALUES上也做了些变化。如果VALUES中什么都不写，那MySQL将使用表中每一列的默认值来插入新记录。

　　INSERT INTO users () VALUES();

　　如果表名后什么都不写，就表示向表中所有的字段赋值。使用这种方式，不仅在VALUES中的值要和列数一致，而且顺序不能颠倒。 INSERT INTO users VALUES(123, '姚明', 25);

　　如果将INSERT语句写成如下形式MySQL将会报错。

　　INSERT INTO users VALUES('姚明',25);

		</screen>
		</sect1>

		<sect1>
			<title>
			使用INSERT插入多条记录
			</title>
			<screen>
　　看到这个标题也许大家会问，这有什么好说的，调用多次INSERT语句不就可以插入多条记录了吗！但使用这种方法要增加服务器的负荷，因为，执行每一次SQL服务器都要同样对SQL进行分析、优化等操作。幸好MySQL提供了另一种解决方案，就是使用一条INSERT语句来插入多条记录。这并不是标准的SQL语法，因此只能在MySQL中使用。

　　INSERT INTO users(name, age)
　　VALUES('姚明', 25), ('比尔.盖茨', 50), ('火星人', 600);

　　上面的INSERT 语句向users表中连续插入了3条记录。值得注意的是，上面的INSERT语句中的VALUES后必须每一条记录的值放到一对(…)中，中间使用","分割。假设有一个表table1

　　CREATE TABLE table1(n INT)；

　　如果要向table1中插入5条记录，下面写法是错误的：

　　INSERT INTO table1 (i) VALUES(1,2,3,4,5);

　　MySQL将会抛出下面的错误

　　ERROR 1136: Column count doesn't match value count at row 1

　　而正确的写法应该是这样：

　　INSERT INTO t able1(i) VALUES(1),(2),(3),(4),(5);

　　当然，这种写法也可以省略列名，这样每一对括号里的值的数目必须一致，而且这个数目必须和列数一致。如：

　　INSERT INTO t able1 VALUES(1),(2),(3),(4),(5);

			</screen>
		</sect1>
		<sect1>
			<title>
			REPLACE
			</title>
			<screen>
　　我们在使用数据库时可能会经常遇到这种情况。如果一个表在一个字段上建立了唯一索引，当我们再向这个表中使用已经存在的键值插入一条记录，那将会抛出一个主键冲突的错误。当然，我们可能想用新记录的值来覆盖原来的记录值。如果使用传统的做法，必须先使用DELETE语句删除原先的记录，然后再使用 INSERT插入新的记录。而在MySQL中为我们提供了一种新的解决方案，这就是REPLACE语句。使用REPLACE插入一条记录时，如果不重复，REPLACE就和INSERT的功能一样，如果有重复记录，REPLACE就使用新记录的值来替换原来的记录值。

　　使用REPLACE的最大好处就是可以将DELETE和INSERT合二为一，形成一个原子操作。这样就可以不必考虑在同时使用DELETE和INSERT时添加事务等复杂操作了。

　　在使用REPLACE时，表中必须有唯一索引，而且这个索引所在的字段不能允许空值，否则REPLACE就和INSERT完全一样的。

　　在执行REPLACE后，系统返回了所影响的行数，如果返回1，说明在表中并没有重复的记录，如果返回2，说明有一条重复记录，系统自动先调用了 DELETE删除这条记录，然后再记录用INSERT来插入这条记录。如果返回的值大于2，那说明有多个唯一索引，有多条记录被删除和插入。

　　REPLACE的语法和INSERT非常的相似，如下面的REPLACE语句是插入或更新一条记录。

　　REPLACE INTO users (id,name,age) VALUES(123, '赵本山', 50);
　
　　插入多条记录：

　　REPLACE INTO users(id, name, age)
　　VALUES(123, '赵本山', 50), (134,'Mary',15);

　　REPLACE也可以使用SET语句

　　REPLACE INTO users SET id = 123, name = '赵本山', age = 50;

　　上面曾提到REPLACE可能影响3条以上的记录，这是因为在表中有超过一个的唯一索引。在这种情况下，REPLACE将考虑每一个唯一索引，并对每一个索引对应的重复记录都删除，然后插入这条新记录。假设有一个table1表，有3个字段a, b, c。它们都有一个唯一索引。

　　CREATE TABLE table1(a INT NOT NULL UNIQUE,b INT NOT NULL UNIQUE,c INT NOT NULL UNIQUE);

　　假设table1中已经有了3条记录

　　a b c
　　1 1 1
　　2 2 2
　　3 3 3 

　　下面我们使用REPLACE语句向table1中插入一条记录。

　　REPLACE INTO table1(a, b, c) VALUES(1,2,3);

　　返回的结果如下

　　Query OK, 4 rows affected (0.00 sec)

　　在table1中的记录如下

　　a b c
　　1 2 3

　　我们可以看到，REPLACE将原先的3条记录都删除了，然后将（1, 2, 3）插入。 

			</screen>
		</sect1>
		<sect1>
			<title>
			UPDATE
			</title>
			<screen>
　　UPDATE的功能是更新表中的数据。这的语法和INSERT的第二种用法相似。必须提供表名以及SET表达式，在后面可以加WHERE以限制更新的记录范围。

　　UPDATE table_anem SET column_name1 = value1, column_name2 = value2, ...

　　WHERE ... ;

　　如下面的语句将users表中id等于123的记录的age改为24

　　UPDATE users SET age = 24 WHERE id = 123;

　　同样，可以使用UPDATE更新多个字段的值 UPDATE users SET age = 24, name = 'Mike' WHERE id = 123;

　　上面的UPDATE语句通过WHERE指定一个条件，否则，UPDATE将更新表中的所有记录的值。

　　在使用UPDATE更新记录时，如果被更新的字段的类型和所赋的值不匹配时，MySQL将这个值转换为相应类型的值。如果这个字段是数值类型，而且所赋值超过了这个数据类型的最大范围，那么MySQL就将这个值转换为这个范围最大或最小值。如果字符串太长，MySQL就将多余的字符串截去。如果设置非空字段为空，那么将这个字段设置为它们的默认值，数字的默认值是0，字符串的默认值是空串（不是null，是""）。


有两种情况UPDATE不会对影响表中的数据。

　　1. 当WHERE中的条件在表中没有记录和它匹配时。

　　2. 当我们将同样的值赋给某个字段时，如将字段abc赋为'123'，而abc的原值就是'123'。

　　和INSERT、REPLACE一样，UPDATE也返回所更新的记录数。但这些记录数并不包括满足WHERE条件的，但却未被更新的记录。如下同的UPDATE语句就未更新任何记录。

　　UPDATE users SET age = 30 WHERE id = 12;
　　Query OK, 0 rows affected (0.00 sec)

　　需要注意的时，如果一个字段的类型是TIMESTAMP，那么这个字段在其它字段更新时自动更新。

　　在有些时候我们需要得到UPDATE所选择的行数，而不是被更新的行数。我们可以通过一些API来达到这个目的。如MySQL提供的C API提供了一个选项可以得到你想要的记录数。而MySQL的JDBC驱动得到的默认记录数也是匹配的记录数。

　　UPDATE和REPLACE基本类似，但是它们之间有两点不同。

　　1. UPDATE在没有匹配记录时什么都不做，而REPLACE在有重复记录时更新，在没有重复记录时插入。

　　2. UPDATE可以选择性地更新记录的一部分字段。而REPLACE在发现有重复记录时就将这条记录彻底删除，再插入新的记录。也就是说，将所有的字段都更新了。

			</screen>
		</sect1>
		<sect1>
			<title>
				DELETE和TRUNCATE TABLE
			</title>
			<screen>
　　在MySQL中有两种方法可以删除数据，一种是DELETE语句，另一种是TRUNCATE TABLE语句。DELETE语句可以通过WHERE对要删除的记录进行选择。而使用TRUNCATE TABLE将删除表中的所有记录。因此，DELETE语句更灵活。

　　如果要清空表中的所有记录，可以使用下面的两种方法：

　　DELETE FROM table1
　　TRUNCATE TABLE table1

　　其中第二条记录中的TABLE是可选的。

　　如果要删除表中的部分记录，只能使用DELETE语句。

　　DELETE FROM table1 WHERE ...;

　　如果DELETE不加WHERE子句，那么它和TRUNCATE TABLE是一样的，但它们有一点不同，那就是DELETE可以返回被删除的记录数，而TRUNCATE TABLE返回的是0。

　　如果一个表中有自增字段，使用TRUNCATE TABLE和没有WHERE子句的DELETE删除所有记录后，这个自增字段将起始值恢复成1.如果你不想这样做的话，可以在DELETE语句中加上永真的WHERE，如WHERE 1或WHERE true。

　　DELETE FROM table1 WHERE 1;

　　上面的语句在执行时将扫描每一条记录。但它并不比较，因为这个WHERE条件永远为true。这样做虽然可以保持自增的最大值，但由于它是扫描了所有的记录，因此，它的执行成本要比没有WHERE子句的DELETE大得多。

　　DELETE和TRUNCATE TABLE的最大区别是DELETE可以通过WHERE语句选择要删除的记录。但执行得速度不快。而且还可以返回被删除的记录数。而TRUNCATE TABLE无法删除指定的记录，而且不能返回被删除的记录。但它执行得非常快。

　　和标准的SQL语句不同，DELETE支持ORDER BY和LIMIT子句，通过这两个子句，我们可以更好地控制要删除的记录。如当我们只想删除WHERE子句过滤出来的记录的一部分，可以使用LIMIB，如果要删除后几条记录，可以通过ORDER BY和LIMIT配合使用。假设我们要删除users表中name等于"Mike"的前6条记录。可以使用如下的DELETE语句：

　　DELETE FROM users WHERE name = 'Mike' LIMIT 6;

　　一般MySQL并不确定删除的这6条记录是哪6条，为了更保险，我们可以使用ORDER BY对记录进行排序。

　　DELETE FROM users WHERE name = 'Mike' ORDER BY id DESC LIMIT 6;

			</screen>
		</sect1>
	</chapter>
	<chapter>
		<title>The common functions</title>
		<para>常用功能</para>
		<sect1>
			<title>
			复制表或表结构
			</title>
			<para>
			CREATE TABLE 方法
			</para>
			<screen>
<![CDATA[
整表复制 # create table 新表 select * from 旧表;
结构复制 # create table 新表 select * from 旧表 where 1<>1;
]]>
			</screen>
			<para>
			INSERT INTO 方法
			</para>
			<screen>
<![CDATA[
得到建表语句 # show create table 旧表;
新建表
复制数据到新表 INSERT INTO new_table(col1,col2,...) (SELECT col1,col2,... FROM old_table);
]]>
			</screen>
		</sect1>
		<sect1>
			<title>
			添加字段
			</title>
			<screen>
<![CDATA[
alter table article add column visibility tinyint(1) unsigned default NULL; 



添加字段：

alter table `user_movement_log`
Add column GatewayId int  not null default 0 AFTER `Regionid` (在哪个字段后面添加)

删除字段：

alter table `user_movement_log` drop column Gatewayid

调整字段顺序：

ALTER TABLE `user_movement_log`  CHANGE `GatewayId` `GatewayId` int not null default 0  AFTER RegionID



//主键:

   alter table tabelname add new_field_id int(5) unsigned default 0 not null auto_increment ,add primary key (new_field_id);

//增加一个新列:

   alter table t2 add d timestamp;
alter table infos add ex tinyint not null default '0';

//删除列:

   alter table t2 drop column c;

//重命名列:

   alter table t1 change a b integer;


//改变列的类型:

   alter table t1 change b b bigint not null;
alter table infos change list list tinyint not null default '0';

//重命名表:

   alter table t1 rename t2;

加索引:

   mysql> alter table tablename change depno depno int(5) not null;
mysql> alter table tablename add index 索引名 (字段名1[，字段名2 …]);
mysql> alter table tablename add index emp_name (name);

加主关键字的索引:

mysql> alter table tablename add primary key(id);

加唯一限制条件的索引:

  mysql> alter table tablename add unique emp_name2(cardnumber);

删除某个索引:

   mysql>alter table tablename drop index emp_name;

修改表：

增加字段：

   mysql> ALTER TABLE table_name ADD field_name field_type;

修改原字段名称及类型：

   mysql> ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;

删除字段：

   mysql> ALTER TABLE table_name DROP field_name; 



]]>
			</screen>
		</sect1>
	
		<sect1>
			<title>
			创建索引和删除索引
			</title>
			<screen>
<![CDATA[
创建索引

在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。
1．ALTER TABLE

ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。

 

ALTER TABLE table_name ADD INDEX index_name (column_list)

ALTER TABLE table_name ADD UNIQUE (column_list)

ALTER TABLE table_name ADD PRIMARY KEY (column_list)

 

其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。
2．CREATE INDEX

CREATE INDEX可对表增加普通索引或UNIQUE索引。

 

CREATE INDEX index_name ON table_name (column_list)

CREATE UNIQUE INDEX index_name ON table_name (column_list)

 

table_name、index_name和column_list具有与ALTER TABLE语句中相同的含义，索引名不可选。另外，不能用CREATE INDEX语句创建PRIMARY KEY索引。
3．索引类型

在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。

PRIMARY KEY索引和UNIQUE索引非常类似。事实上，PRIMARY KEY索引仅是一个具有名称PRIMARY的UNIQUE索引。这表示一个表只能包含一个PRIMARY KEY，因为一个表中不可能具有两个同名的索引。

下面的SQL语句对students表在sid上添加PRIMARY KEY索引。

 

ALTER TABLE students ADD PRIMARY KEY (sid)




 
删除索引

可利用ALTER TABLE或DROP INDEX语句来删除索引。类似于CREATE INDEX语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。

 

DROP INDEX index_name ON talbe_name

ALTER TABLE table_name DROP INDEX index_name

ALTER TABLE table_name DROP PRIMARY KEY

 

其中，前两条语句是等价的，删除掉table_name中的索引index_name。

第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。

如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。

]]>
			</screen>
		</sect1>
		
	</chapter>
	<chapter>
		<title>
		Solve error
		</title>
		<para>
	 	常见问题的解决
		</para>
		<sect1>
			<title>
			ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (111)
			</title>
			<screen>
<![CDATA[
   1. 权限问题：有很多人直接输入mysql 而用户列表里不存在密码为空的root用户，所以报此错误
   2. 这是没启动mysql的守护进程，执行service mysqld start就行了 
]]>
			</screen>
		</sect1>
		<sect1>
			<title>
			复制data文件夹方式复制数据库出现找不到数据库的问题
			</title>
			<screen>
<![CDATA[
    这是因为本地的MYSQL系统中没有找到新复制过来的表的信息，而这些信息都在data/下的ibdata1文件中的。

        所以你可以：

           1. 停止mysql服务
           2. 将现有的ibdata1文件备份
           3. 再将复制的数据库文件所在的MYSQL中的ibdata1覆盖到现有的MYSQL中的data/中
           4. 启动mysql服务
           5. 用mysqldump把复制过来数据文件的数据库导出
           6. 停止mysql服务
           7. 再用备份的ibdata1文件覆盖现有系统中的ibdata1文件，并且删除刚才复制过来的数据库文件
           8. 启动mysql服务
           9. 导入刚才mysqldump出来的数据库备份文件
          10. OK 完成 

    参见：http://hi.baidu.com/0wrong0/blog/item/820ec81b48cf64d2ad6e7537.html MYSQL通过复制DATA文件夹内容恢复数据_G3的百度空间_百度空间 
]]>
			</screen>
		</sect1>
		<sect1>
			<title>
			启动时错误：Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)
			</title>
			<screen>
<![CDATA[
这是无法找到当前系统的mysql的Socket文件mysql.sock而导致的无法连接数据库

    解决方法是

       1. 打开mysql的配置文件my.cnf，如/etc/mysql/my.cnf
       2. 改变[client]项目和[mysqld]项目中的socket = 为你系统mysql编译时候指定的socket文件地址，如果你安装的是已编译版本，一般会是/var/lib/mysql/mysql.sock
       3. /etc/init.d/mysqld restart 重启mysql服务 


]]>
			</screen>
		</sect1>


    <sect1>
	<title>Fatal error: Can't open and lock privilege tables: Can't find file: './mysql/host.frm' (errno: 13)</title>
	<para>
		启动服务时错误:
	</para>
	<para>
	错误日志:
	</para>
	<screen>
	080724 16:50:23 [ERROR] /usr/libexec/mysqld: Can't find file: './mysql/host.frm' (errno: 13)
	080724 16:50:23 [ERROR] /usr/libexec/mysqld: Can't find file: './mysql/host.frm' (errno: 13)
	080724 16:50:23 [ERROR] Fatal error: Can't open and lock privilege tables: Can't find file: './mysql/host.frm' (errno: 13)
	080724 16:50:23 mysqld ended

	</screen>
	<para>
	解决方法:
	</para>
	<para>
	重新运行一次 mysql_install_db，重设一次权限，此问题是mysql的一些文件丢失或所属者不是mysql
	</para>
	<para>
	--
	</para>
    </sect1>





	</chapter>
</book>

