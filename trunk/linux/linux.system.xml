  <chapter>
        <title>
        System Application
        </title>
	<section>
		<title>
		常用命令
		</title>
		<screen>
<![CDATA[
-- wget URL 本地地址 --

        下载工具 

-- 


-- ip address show --

        查看IP信息 

-- 


-- sudo command --

        命令只是使用了管理员的身份，但没有使用管理员的SHELL，所以如果想使用管理员的SHELL，需要（sudo /sbin（管理员SHELL所在目录）/命令） 

-- 


-- su - <user_name> --

        切换到root 或某一指定用户,注意：如果不加“-”只会得到该用户的权限，但没有得到他的shell，所以需要在su后面加上一个减号 “-” 如：su - root 这样来得到root的权限和shell 

-- 


-- grub --

        GNU GRUB（简称“GRUB”）是一个来自GNU项目的多操作系统启动程序。 

-- 


-- grep '要搜索的内容' * -R --

        文件内容搜索 

-- 


-- find -name file_name --

        搜索文件 -name 按文件名搜索 

-- 


-- pkill -kill -t pts_number --

        踢用户 

使用w查看用户：
jole     pts/1    192.168.1.17     Fri16    1.00s 12:38   0.00s w
tom     pts/2    192.168.1.17     Fri16   24:01m  0.06s  0.04s -bash
然后使用命令
pkill -kill -t pts/1
踢用户jole

-- 


-- route --

        路由 

#使用路由方式，使用route命令。

-- Route命令的正确用法

使用 Route 命令行工具查看并编辑计算机的 IP 路由表。Route 命令和语法如下所示：

route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]

-f 清除所有网关入口的路由表。

-p 与 add 命令一起使用时使路由具有永久性。

Command 指定您想运行的命令 (Add/Change/Delete/Print)。

Destination 指定该路由的网络目标。

mask Netmask 指定与网络目标相关的网络掩码（也被称作子网掩码）。

Gateway 指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址。

metric Metric 为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用。

if Interface 为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引。

/? 在命令提示符处显示帮助。



#示例

若要显示 IP 路由表的全部内容，请键入：

route print

若要显示以 10. 起始的 IP 路由表中的路由，请键入：

route print 10.*

若要添加带有 192.168.12.1 默认网关地址的默认路由，请键入：

route add 0.0.0.0 mask 0.0.0.0 192.168.12.1

若要向带有 255.255.0.0 子网掩码和 10.27.0.1 下一跃点地址的 10.41.0.0 目标中添加一个路由，请键入：

route add 10.41.0.0 mask 255.255.0.0 10.27.0.1

若要向带有 255.255.0.0 子网掩码和 10.27.0.1 下一跃点地址的 10.41.0.0 目标中添加一个永久路由，请键入：

route -p add 10.41.0.0 mask 255.255.0.0 10.27.0.1

若要向带有 255.255.0.0 子网掩码、10.27.0.1 下一跃点地址且其成本值标为 7 的 10.41.0.0 目标中添加一个路由，请键入：

route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 metric 7

若要向带有 255.255.0.0 子网掩码、10.27.0.1 下一跃点地址且使用 0x3 接口索引的 10.41.0.0 目标中添加一个路由，请键入：

route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 if 0x3

若要删除到带有 255.255.0.0 子网掩码的 10.41.0.0 目标的路由，请键入：

route delete 10.41.0.0 mask 255.255.0.0

若要删除以 10. 起始的 IP 路由表中的所有路由，请键入：

route delete 10.*

若要将带有 10.41.0.0 目标和 255.255.0.0 子网掩码的下一跃点地址从 10.27.0.1 修改为 10.27.0.25，请键入：

route change 10.41.0.0 mask 255.255.0.0 10.27.0.25 


-- 


-- which [文件...] --

        功能说明：查找文件。 

        语　　法：which [文件...] 

        补充说明：which指令会在环境变量$PATH设置的目录里查找符合条件的文件。 

        参　　数：

                　-n<文件名长度> 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。 
                　-p<文件名长度> 　与-n参数相同，但此处的<文件名长度>包括了文件的路径。 
                　-w 　指定输出时栏位的宽度。 
                　-V 　显示版本信息 

-- 
]]>
		</screen>
	</section>
        <section>
                <title>
                VIM
                </title>
		<screen>
<![CDATA[
Vi IMproved - enhanced vi editor (transitional package)


sudo apt-get install vim-perl vim-python vim-latexsuite 
]]>
		</screen>
		<section>
			<title>
			使用
			</title>
			<screen>
<![CDATA[
-- 在多文件对比或多屏显示状态下切换光标：Ctrl + ww --


VIM: split your windows

编辑多个文件的时候，拆分窗口是相当有用的功能。

    * :q 

            关闭光标所在的分屏 

    * :split <filename> 

            按拆分模式打开文件，默认为上下拆分 

    * :vsplit <filename> 

            左右拆分 

    * Ctrl-w w 

            切换活动窗口 

    * Ctrl-w Ctrl-w 

            同上 

    * Ctrl-w h/j/k/l 

            切换活动窗口为 左/上/下/右 边的窗口 



-- New text file line delimiter --


:set ff
:set ff=dos
:set ff=unix
:set ff=mac


-- vim中的出现^M --


sudo apt-get install tofrodos dos2unix


tab 符


set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker


-- 粘贴时禁用格式化功能 --

:set paste


-- Regular Expressions 会去掉vim文件中的空白行 --


:%s/^\s*\n/


-- 大小写转换 --

将光标移动到想要大小写转换的地方然后键入

guw (大写转换成小写)

gUw (小写转换成大写)

g~w (是改变光标到词尾)

guu gUU g~~ (是改变一行)



-- vimrc --


-- VIM功能配置（高亮） --


neo@netkiller:~$ cat /home/neo/.vimrc

set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker

set paste

set ruler

set number

set nocp " don't open Vim in Vi-compatible mode

set bs=2 " setup backspace to delete previous char in insert mode

set encoding=utf-8 fileencodings= " set UTF-8 for all files

set autoindent

set smartindent

set t_Co=256

syntax on

set syntax=tt2html


-- 高亮搜索 --


set hlsearch


-- 去除高亮搜索 --


set nohlsearch


colorscheme elflord



-- vim backup script --

			
#!/bin/bash
########################################
# vim script for automatic backup by neo
########################################

datetime=`date +"%Y-%m-%d.%H:%M:%S"`
current_date=`date +"%Y-%m-%d"`
current_time=`date +"%H:%M:%S"`
filename=`basename $1`
original=$1

if [ -f ${original}.original ]
then
    echo "[${datetime}] [B] ${original} to ${original}.original" >> ~/backup/history.log
else
    cp ${original} ${original}.original
fi

if [ -d ~/backup/${current_date} ]
then
    echo "[${datetime}] [O] ${original}" >> ~/backup/history.log
else
    mkdir -p ~/backup/${current_date}
    echo [${datetime}] [C] mkdir ~/backup/${current_date} >> ~/backup/history.log
fi

backup=~/backup/${current_date}/${filename}.${current_time}
if [ -f ${original} ];
then
    cp ${original} ${backup}
    echo "[${datetime}] [B] ${original} to ${backup}" >> ~/backup/history.log
fi

vim ${original}



datetime=`date +"%Y-%m-%d.%H:%M:%S"`
current_date=`date +"%Y-%m-%d"`
current_time=`date +"%H:%M:%S"`
newfile=~/backup/${current_date}/${filename}.${current_time}

if [ -f ${original} ];
then
    if [ -f ${backup} ];
    then
        original_sha=`sha1sum ${backup} |awk -F ' ' '{print $1}'`
        newfile_sha=`sha1sum ${original} |awk -F ' ' '{print $1}'`

        if [ $original_sha = $newfile_sha ];
        then
            echo "[${datetime}] --- " >> ~/backup/history.log
            exit
        fi

    fi
    cp ${original} ${newfile}
    echo "[${datetime}] [M] ${original}" >> ~/backup/history.log
    echo "[${datetime}] [B] ${original} to ${newfile}" >> ~/backup/history.log

fi
echo "[${datetime}] --- " >> ~/backup/history.log
exit



]]>
			</screen>
		</section>
	</section>
	<section>
		<title>
		vimdiff
		</title>
		<section>
			<title>
			启动方法
			</title>
			<screen>
<![CDATA[
首先保证系统中的diff命令是可用的。Vim的diff模式是依赖于diff命令的。Vimdiff的基本用法就是：

# vimdiff  FILE_LEFT  FILE_RIGHT


或者

# vim -d  FILE_LEFT  FILE_RIGHT



屏幕被垂直分割，左右两侧分别显示被比较的两个文件。两个文件中连续的相同的行被折叠了起来，以便使用者能把注意力集中在两个文件的差异上。只在某一文件中存在的行的背景色被设置为蓝色，而在另一文件中的对应位置被显示为绿色。两个文件中都存在，但是包含差异的行显示为粉色背景，引起差异的文字用红色背景加以突出。

除了用这种方法启动vim的diff模式之外，我们还可以用分割窗口命令来启动diff模式：

# vim FILE_LEFT


然后在vim的ex模式（也就是"冒号"模式）下输入：

:vertical diffsplit FILE_RIGHT


也可以达到同样的效果。如果希望交换两个窗口的位置，或者希望改变窗口的分割方式，可以使用下列命令：

1. Ctrl-w K（把当前窗口移到最上边）

2. Ctrl-w H（把当前窗口移到最左边）

3. Ctrl-w J（把当前窗口移到最下边）

4. Ctrl-w L（把当前窗口移到最右边）

其中1和3两个操作会把窗口改成水平分割方式。
]]>
			</screen>
		</section>
		<section>
			<title>
			光标移动
			</title>
			<screen>
<![CDATA[
接下来试试在行间移动光标，可以看到左右两侧的屏幕滚动是同步的。这是因为"scrollbind"选项被设置了的结果，vim会尽力保证两侧文件的对齐。如果不想要这个特性，可以设置：

:set noscrollbind


可以使用快捷键在各个差异点之间快速移动。跳转到下一个差异点：

]c


反向跳转是：

[c


如果在命令前加上数字的话，可以跳过一个或数个差异点，从而实现跳的更远。比如如果在位于第一个差异点的行输入"2]c"，将越过下一个差异点，跳转到第三个差异点。
]]>
			</screen>
		</section>
		<section>
			<title>
			文件合并
			</title>
			<screen>
<![CDATA[
文件比较的最终目的之一就是合并，以消除差异。如果希望把一个差异点中当前文件的内容复制到另一个文件里，可以使用命令

dp （diff "put"）


如果希望把另一个文件的内容复制到当前行中，可以使用命令

do (diff "get"，之所以不用dg，是因为dg已经被另一个命令占用了)


如果希望手工修改某一行，可以使用通常的vim操作。如果希望在两个文件之间来回跳转，可以用下列命令序列：

Ctrl-w, w


在修改一个或两个文件之后，vimdiff会试图自动来重新比较文件，来实时反映比较结果。但是也会有处理失败的情况，这个时候需要手工来刷新比较结果：

:diffupdate


如果希望撤销修改，可以和平常用vim编辑一样，直接

<ESC>, u


但是要注意一定要将光标移动到需要撤销修改的文件窗口中。
]]>
			</screen>
		</section>
		<section>
			<title>
			同时操作两个文件
			</title>
			<screen>
<![CDATA[
在比较和合并告一段落之后，可以用下列命令对两个文件同时进行操作。比如同时退出：

:qa （quit all）


如果希望保存全部文件：

:wa （write all）


或者是两者的合并命令，保存全部文件，然后退出：

:wqa （write, then quit all）


如果在退出的时候不希望保存任何操作的结果：

:qa! （force to quit all）
]]>
			</screen>
		</section>
		<section>
			<title>
			上下文的展开和查看
			</title>
			<screen>
<![CDATA[

比较和合并文件的时候经常需要结合上下文来确定最终要采取的操作。Vimdiff 缺省是会把不同之处上下各 6 行的文本都显示出来以供参考。其他的相同的文本行被自动折叠。如果希望修改缺省的上下文行数，可以这样设置：

:set diffopt=context:3


可以用简单的折叠命令来临时展开被折叠的相同的文本行：

zo （folding open，之所以用z这个字母，是因为它看上去比较像折叠着的纸）


然后可以用下列命令来重新折叠：

zc （folding close）

]]>
			</screen>
		</section>
	</section>
&linux.system.yum.xml;
&linux.system.at_batch_crontab_anacron.xml;
&linux.system.init.xml;
&linux.system.fstab.xml;
&linux.system.fsck.xml;
&linux.system.ntsysv.xml;
&linux.system.curl.xml;
&linux.system.soft_installaction.xml;
&linux.system.pppoe.xml;
&linux.system.ps.xml;
	<section>
		<title>
		如何限制Linux控制台访问
		</title>
		<screen>
<![CDATA[
　　控制台是部署Linux服务器的主要窗口之一，但是当我们将Linux服务器部署完成之后，这个控制台反而有可能成为危害其安全的罪魁祸首。所以在这台Linux服务器投入生产使用之后，就需要对其访问进行限制，否则的话有可能会对Linux服务器带来安全隐患。

　　一、限制控制台访问

　　在Linux操作系统中所有的命令在系统中都是以文件的形式体现出来的。如果需要限制或者禁用控制台下的访问，只需要把某些文件的连接注释掉即可。比如我们要禁止所有的控制台访问（包括程序与应用文件），则可以把目录/etc/pam.d下面的所有文件中包含 pam_console.so的行注释掉。

　　二、禁止使用控制台程序

　　为了提高Linux服务器系统的安全性，一个最简单也是被很多系统管理员所采用的方法就是禁止使用相关的控制台程序。众所周知，Linux操作系统是一个多用户的操作系统。当其他用户正连在操作系统上的时候，如果某个用户强制执行shutdown命令的话，那么无疑会让其他用户正在修改的文件发生数据丢失。为此当Linux服务器部署完毕之后，需要通过某些方式禁止用户使用控制台程序。

　　要实现这个目的也比较简单，如主要通过如下命令即可：

　　rm –f /etc/security/console.apps/servicename

　　三、禁止使用控制台程序应用之禁用Xwindow服务

　　在把Linux服务器投入到生产后，最好能够把Xwindow这个服务程序删除掉。这个删除的方法也很简单，就是上面我提到过的禁止使用控制台程序的方法。其实Linux操作系统在启动的时候，是先进入到控制台。然后再在控制台中使用startx命令启动X Window图形化管理界面。系统管理员能够通过禁用控制台程序的方法，把这图形化管理程序禁用掉：

　　rm –f /etc/security/console.apps/xserver

　　执行这个命令后，普通用户就无法登陆到图形化的管理界面了。但是在有必要的情况下，root特权用户仍然可以启动图形化管理界面。所以北街建议，如果真的要在XWindow图形化管理界面下部署应用程序的话，那么在部署完成后请系统管理员通过上面这条命令把这个XWindow应用程序禁用掉，以提高Linux服务器的安全性与性能，让其CPU与内存资源能够用在刀刃上。

　　Linux操作系统作为服务器最大的特色在于稳定的系统内核。而在图形化界面与桌面环境来说，虽然可以跟Windows操作系统相抗衡，但是并没有明显的优势。而且从一定程度上来说，这些功能还会影响到Linux操作系统本身的性能与安全。如果Linux操作系统是用来实现服务器操作系统的，则最好在部署的时候不需要安装这两个服务。 
]]>
		</screen>
	</section>
	<section>
		<title>
		更改Linux中一些默认设置
		</title>
		<screen>
<![CDATA[
　　在Linux操作系统中，虽然其默认设置能够满足最大的安全性需求。但是有时候，Linux操作系统可能只是用来做普通的客户端使用。此时如此高的安全性往往是没有必要的。而且安全性与便利性往往是相互矛盾的。过高的安全性会给用户使用Linux 系统带来一定的麻烦。为此如果系统管理员想让Linux操作系统当作普通客户端来使用的话，则必须对Linux操作系统的一些默认设置进行更改，以方便用户的操作。

　　一、允许普通用户加载光盘。

　　在Linux系统中，默认情况下操作系统只允许root特权用户才能够利用mount命令挂载光驱，普通用户没有这个权限。如果普通用户执行这个命令挂载光驱的话，则系统会提示“only root can do that”的错误提示信息，即只有root用户才能够执行此命令。如果每次普通用户要使用光驱的话，都要让系统管理员去进行挂载，那会浪费系统管理员宝贵的时间，这非常的不方便。为此企业系统管理员可能希望普通用户也具有挂载光驱的权限。

　　怎样允许普通用户也能够加载光盘呢？我们可以修改/etc/fstab设置文件，具体的修改很简单，只需要在cdrom那一行上，加入user项目即可，这样任何用户都可以在工作中加载光驱。

　　二、系统启动时自动登录

　　有些用户在使用Linux系统时会反应，在Windows系统中可以实现自动登录。即在系统启动的时候，不需要输入用户名与密码，就可以自动登录。反正电脑就自己用，不需要每次启动系统的时候都输入密码这么麻烦。但是他们在使用Linux系统的时候，却无法实现自动登录的功能。为此企业员工会对 Linux系统产生不满。

　　其实Linux系统之所以默认情况下不建议采用系统自动登录，主要还是出于安全的考虑。因为Linux系统是一个典型的多用户操作系统，在同一时刻可以有多个用户同时登录Linux操作系统进行相关的操作。如果让Linux系统启动的时候自动以某个用户与密码登录的话，那么如果此时使用系统的员工不是系统默认的帐户，就会出现麻烦。而且用户名与密码也是Linux操作系统的第一个安全关卡。如果失去了这道关卡的话，由于在登录系统的时候不用进行身份验证（系统会自动以某个用户及帐号进行登陆），会造成比较大的安全隐患。

　　如果用户一定要让Linux系统进行自动登录，也是可行的。我认为，除非这个主机就只有一个员工使用，并且安全方面没有严格要求的话，可以考虑满足企业员工的这个自动登录的要求。其实要实现这个要求难度也不是很大。如用户采用的是gnome桌面环境的话（这是Linux系统采用的默认桌面环境），当指定启动后直接进入XWindows时，系统是以GDM登录管理程序显示登录画面。为此要修改登录方式（手工登录方式修改为自动登录方式）必须要修改GDM的设置。

　　系统管理员可以在登录当前界面之后，单击“开始”、“系统设置”、“登录画面”按钮。然后系统就会打开GDM设置对话框。在这个对话框中，通常有“自动登录”与“延迟登录”两部分内容。若系统管理员需要为某个用户指定自动登录的话，则需要选中“首次启动时自动登录一个用户”复选框，然后再在自动登录用户名中指定一个当前系统的有效用户。那么下次系统在启动时就会自动以这个用户名登录。

　　另外与Windows操作系统的自动登录相比，Linux还提供了一个额外的延迟登录的功能。延迟登录彪死后启动Xwindows之后，系统仍然会显示登录界面。如果一段时间后用户没有输入用户名与密码的话，则就会以系统管理员指定的用户名进行登录。若要启用这个功能，则系统管理员需要选中“在等待指定秒数之后自动登录一名用户”复选框，并输入等待的时间与自动登录的用户名。经过类似的设置之后，系统就会在下次启动的时候，自动采用这个用户名进行登录。

　　不过我要不厌其烦的再向大家强调一遍，登陆用户与密码是操作系统中文件信息安全的重要保障。如果让系统实现自动登录的话，就会失去这个保障。为此系统管理员就需要在安全性与用户的便利性之间取得一个均衡。

　　三、让Linux系统能够支持U盘

　　在Windows系统下使用U盘等移动设备很方便。用户只需要把U盘等移动存储设备连接到USB插口中即可，通常情况下都不需要安装驱动或者进行其他的配置即可使用。虽然Linux系统在很早的版本中都已经支持USB接口，但是其操作起来跟Windows系统相比还是有一定的难度。或者说至少没有Windows系统下那么方便。

　　与光盘一样，在Linux系统下采用U盘的话，必须要先将其加载到系统中。如系统管理员需要先创建一个目录，然后插入U盘，并执行加载命令。这个加载命令为：

　　Mount –t vfat –o iocharset=cp950 /dev/sda1 /mnt/usb1

　　在这个命令中需要注意的一点是必须要加入–o iocharset=cp950这个参数。否则的话，U盘中的中文文件名字将不能够正常显示。U盘使用完毕后，也要相Windows系统一样，也要把这个U盘卸载掉，否则的话，U盘中的文件容易出现损坏。

　　可见Linux系统对于普通用户来说使用起来却是有一定的难度。如果系统管理员想让Linux操作系统当作用户的客户端，那么必须要对 Linux系统的一些默认设置进行更改，以减少用户在使用Linux系统过程中的障碍。除了以上三个内容外，系统管理员可能还需要更改系统的环境（是 KDE还是Gnone）、用户使用的目录、自动挂载文件服务器上的共享目录等等，以方便员工进行日常的操作。 
]]>
		</screen>
	</section>
	<section>
		<title>
		问题解答
		</title>
		<screen>
<![CDATA[
-- 任何用户都无法修改密码 --

错误提示：/usr/share/cracklib/pw_dict: error reading header

解决方法是安装cracklib-dicts，可以使用yum 也可以下载rpm包自己安装

#rpm -e cracklib-dicts –nodeps 
或
#yum install -y cracklib-dicts

如果已经安装了cracklib-dicts仍然报此错误的话需要重新一下

yum reinstall cracklib-dicts


详细说明：

[root@test]passwd root Changing password for user root. New UNIX password: /usr/share/cracklib/pw_dict: error reading header PWOpen: Success

解决办法 rpm -e cracklib-dicts –nodeps yum install cracklib-dicts

CrackLib是一个可用于类UNIX系统下的函数库,一般来说,通常只使用其中的一个函数.它可以用于编写和passwd有关的程序中,其基本思想是很简单的,就是防止用户使用过于简单,容易被猜测出来或容易被一些工具搜索到的密码.CrackLib并不是一个可以直接运行使用的程序,它是一个函数库,你可以利用其中的函数写自己的程序,或是加入其它程序中,用来提高安全性.比如,你可以重写passwd,使用户在选择密码时受到限制CrackLib使用一个字典,它查找字典以判断所选用密码是否是不安全的密码,所以你也可以加入其它信息,使用自己的字典.比如,加入公司的名称,实验室墙上的单词等等潜在的不安全密码.


更多阅读：

http://forums.fedoraforum.org/showthread.php?t=153053 root password - FedoraForum.org:

http://findasolution.forums-free.com/usr-share-cracklib-pw_dict-error-reading-header-centos-t75.html /usr/share/cracklib/pw_dict: error reading header (centos):

http://itchen.blog.51cto.com/343363/212104 /usr/share/cracklib/pw_dict: error reading header：解决方法 - If one day - 51CTO技术博客:

http://www.ys250.com/2009/09/01/passwd-usrsharecracklibpw_dict-error-reading-header-%E9%94%99%E8%AF%AF/ 幽冥大盗-不进则退 » Blog Archive » passwd :/usr/share/cracklib/pw_dict: error reading header 错误: 
]]>
		</screen>
	</section>
  </chapter>

