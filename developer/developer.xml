<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
  <bookinfo>
    <title>z.En Developer 文档</title>

    <author>
      <firstname>zen</firstname>
      <surname>wong</surname>
      <lineage>王振宇, zenwong, z.En</lineage>
      <affiliation>
        <address><email>w@zenw.org</email>

	Web site:<ulink url='http://www.zenw.org'>http://www.zenw.org</ulink></address>
      </affiliation>
    </author>

    <copyright>
      <year>2009</year>
      <year>2010</year>
      <holder>王振宇</holder>
	<holder>http://www.zenw.org</holder>
    </copyright>
   <releaseinfo>
	<para>版本 2009-12-18</para>
	<para>
		<screen>
转载请与作者联系，转载时请务必标明文章原始出处和作者信息及本声明。

文档最近一次更新于 2010-02-05 16:37
		</screen>
	</para>
   </releaseinfo>

    <abstract>
      <para>开发人员的相关文档</para>
    </abstract>
  </bookinfo>

  <preface>
    <title>序言</title>

	<para>
开发人员相关文档

	</para>
  </preface>

  <chapter>
    <title>Revision control</title>

    <para>版本控制</para>

    <section>
      <title>SVN</title>
	<section>
	<title>
	安装
	</title>
	<screen>
<![CDATA[
The goal of the Subversion project is to build a version control system that is a compelling replacement for CVS in the open source community. The software is released under an Apache/BSD-style open source license.

SVN是一个版本控制软件，类似CVS，但是SVN的的有点是开源的，而且SVN的版本控制能力给CVS还要强多。

SVN可以用于项目管理，还可以用于版本同步，功能可是十分强呢：）

下载：http://subversion.tigris.org

当前日期稳定版SVN1.32http://subversion.tigris.org/downloads/subversion-1.3.2.tar.gz

安装：

解压：#: tar zxvf subversion-1.3.2.tar.gz

依次输入./configure , make , make install 进行编译安装完成。

开启SVN服务：svnserve -d

检测服务是否开启：netstat -ntlp如果看到3690的端口正常开放了，证明SVN启动了。正式使用：首先我们得建立一个SVN的项目，一般人都认为建立项目就只需要一个文件，在我第一次使用SVN之前都有这样的看法，SVN建立项目需要建立文件夹

建立项目命令：svnadmin create project_name project_name 为你的project名字，可以任意取。建立完毕后，project_name是一个文件夹，进入文件夹，可以看到一个conf的文件夹。进入文件夹可以看到2个文件（如果没有passwd文件，可以用vi创建），编辑 svnserve.conf 把anon-access = read ,auth_access = write 还有password-db = passwd 的注释去掉，还有[general]的注释也要去掉。 vi passwd文件，如果是新文件，则输入: [user] your_name = your_password 这里设置的your_name是你的用户名，your_password是你的密码，这个是访问SVN必要的通行证。


好了，现在终于把准备功夫做完了，下面可以正是使用了。首先找到你的项目源代码文件夹，使用下面命令： cd your project in your project dircetory use：svn co /home/project_name --username = your_name --password=your_password

好了，现在你可以在客户机上使用以下命令获得你想要的项目源代码文件 svn co svn://home/project_name --username=your_name --password = your_password

把增加的svn文件添加入svn库： svn add /home/your_project/*.* --username=your_name --password = your_password

提交文件： svn commit /home/your_project/*.* --username=your_name --password=your_password

更新文件：svn update /home/your_project/*.* --username=your_name --password=your_password

当然你可以编辑一个脚本文件来一次完成所有的操作： vi svnupdate.sh

   1. !/bin/sh 

svn add /home/your_project/*.* --username=your_name --password = your_password svn commit /home/your_project/*.* --username=your_name --password=your_password svn update /home/your_project/*.* --username=your_name --password=your_password

chmod +x svnupdate.sh

Finish
]]> 
	</screen>
	</section>
	<section>
	<title>
	使用
	</title>
	<screen>
<![CDATA[
bash> svn help 用法：svn <subcommand> [options] [args] Subversion 命令行客户端，版本 1.2.0。请使用 “svn help <subcommand>” 显示子命令的辅助说明。大多数的子命令可接受文件或目录参数，对目录进行递回存取。如无指定参数给命令，默认将会自当前的目录 (包含) 进行递归存取。

可用的子命令：(括号内是子命令的简写)

 add
 blame (praise, annotate, ann)
 cat
 checkout (co) //从源码库取出一个工作版本的拷贝
 cleanup //
 commit (ci) //提交当前工作拷贝的更改。这个地方是有可能出现代码冲突的。
 copy (cp) //做一个工作拷贝的拷贝。
 delete (del, remove, rm) //删除本地或者svn server response上的文件或者目录。
 diff (di) //比较某个文件与库中的对应文件的不同，类似于系统的diff命令。参数：文件名。
 export //导出一个无版本控制的目录树拷贝。一般用于导出发行，或者投入运行的版本。
 help (?, h)
 import //将本地当前目录下的文件导入到svn response 中。
 info //当前目录下工作拷贝中某文件(文件夹)的信息，如URL，版本，修改日期等。参数：要看的文件(文件夹)
 list (ls) //列出当前工作拷贝下的文件 ，相当于系统的ls命令，不过只能在工作拷贝目录下使用。
 lock
 log
 merge //将两个来源之间的差异应用至工作拷贝路径。
 mkdir //在本地或者svn respon上新建一个文件夹.参数：URL或者路径
 move (mv, rename, ren)
 propdel (pdel, pd)
 propedit (pedit, pe)
 propget (pget, pg)
 proplist (plist, pl)
 propset (pset, ps)
 resolved
 revert
 status (stat, st) //svn工作拷贝当前状态，与svn server上的源码比较的结果。
 switch (sw)
 unlock
 update (up) //将svn server端文件同步到本地

Subversion 是个版本控制系统的工具。欲取得详细资料，请参考 http://subversion.tigris.org/


>svn co checkout (co): Check out a working copy from a repository. usage: checkout URL[@REV]... [PATH]

 If specified, REV determines in which revision the URL is first
 looked up.

 If PATH is omitted, the basename of the URL will be used as
 the destination. If multiple URLs are given each will be checked
 out into a sub-directory of PATH, with the name of the sub-directory
 being the basename of the URL.

有效选项：

 -r [--revision] arg      : ARG (一些命令需要 ARG1:ARG2 )
                           修订版参数可以是：
                               数字      修订版号
                               "{" 日期 "}" 在指定时间以后的修订版date
                               "HEAD"      最近的档案库
                               "BASE"      基线，基于修订版的工作条目
                               "COMMITTED"  最后提交或基线之前
                               "PREV"      修订版提交之前
 -q [--quiet]            : 打印尽可能少
 -N [--non-recursive]    : 只在单个目录操作
 --username arg          : 指定用户 ARG
 --password arg          : 指定密码 ARG
 --no-auth-cache          : 不要缓冲用户验证
 --non-interactive        : 不要交互提示
 --config-dir arg        : 从目录 ARG 读取用户配置文件
 --ignore-externals      : ignore externals definitions
 

sh> svn add add: 把文件和目录放入版本控制中，通过调度加到档案库。它们会在下一次提交时加入。用法：add 路径...

有效选项：

 --targets arg            : 传递文件 ARG 内容为附件参数
 -N [--non-recursive]    : 只在单个目录操作
 -q [--quiet]            : 打印尽可能少
 --config-dir arg        : 从目录 ARG 读取用户配置文件
 --force                  : 强制操作运行
 --auto-props            : 使自动属性有效
 --no-auto-props          : 使自动属性无效  
 
 eg.(下面的命令必须在工作拷贝目录下运行)
 sh> svn add test.c //加一个文件
 sh> svn add test //加一个目录，目录下有任意结构的文件夹
 

sh> svn import http://localhost/svn/hehehehehhe -m=sdfsdf //可在任何目录下，将当前文件夹下的所以文件递归导入到svn response 的hehehhhe目录下。

sh>svn export export: 产生一个无版本控制的目录树拷贝。用法：1、export [-r REV] URL[@PEGREV] [PATH]

     2、export [-r REV] PATH1[@PEGREV] [PATH2]

 1、从 URL 指定的档案库，导出一个干净的目录树到 PATH。如果有指定
   REV 的话，内容即为该修订版的，否则就是 HEAD 修订版。如果 PATH
   被省略的话，地址(URL)的最后部份会被用来当成本地的目录名称。

 2、在工作拷贝中，从指定的 PATH1 导出一个干净的目录树到 PATH2。如果
   有指定 REV 的话，会从指定的修订版导出，否则从 WORKING 导出。如果
   PATH2 被省略的话，PATH1 的最后部份会被用来当成本地的目录名称。
   如果没有指定 REV 的话，所有的本地修改都还会保持著，但是未纳入
   版本控制的文件不会被复制。

   如果指定了 PEGREV ，将从指定的修订版本开始查找。


有效选项：

 -r [--revision] arg      : ARG (一些命令需要 ARG1:ARG2 )
                           修订版参数可以是：
                               数字      修订版号
                               "{" 日期 "}" 在指定时间以后的修订版date
                               "HEAD"      最近的档案库
                               "BASE"      基线，基于修订版的工作条目
                               "COMMITTED"  最后提交或基线之前
                               "PREV"      修订版提交之前
 -q [--quiet]            : 打印尽可能少
 -N [--non-recursive]    : 只在单个目录操作
 --force                  : 强制操作运行
 --username arg          : 指定用户 ARG
 --password arg          : 指定密码 ARG
 --no-auth-cache          : 不要缓冲用户验证
 --non-interactive        : 不要交互提示
 --config-dir arg        : 从目录 ARG 读取用户配置文件
 --native-eol arg        : 使用一个与标准不同的 EOL 标记
                           文件的系统标记是一个本地的 svn:eol-style 属性。
                           ARG 可能是一下之一 'LF'，'CR'，'CRLF'
 --ignore-externals      : ignore externals definitions
 
 eg.
 sh> svn export http://localhost/svn/hehehehehhhe
 

sh> svn merge merge: 将两个来源之间的差异应用至工作拷贝路径。用法：1、merge sourceURL1[@N] sourceURL2[@M] [WCPATH]

     2、merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]
     3、merge -r N:M SOURCE[@REV] [WCPATH]

 1、第一种形式中，来源 URL 各被指定到修订版 N 与 M。这两个就是作为
   比较的来源。如果没有指定修订版的话，默认为 HEAD。

 2、在第二种形式中，对应到两个来源的工作拷贝路径的 URL 定义出用以
   进行比较的来源。这里必须指定修订版。

 3、第三种形式中，SOURCE 可为 URL 或工作拷贝项目，后者会使用对应的
   地址(URL)。在修订版 REV 的 地址(URL) 会以它存在于修订版 N 与 M 的路径来作
   比较。如果未指定 REV，就会假设为 HEAD。

 WCPATH 是接受改变的工作拷贝路径。如果省略 WCPATH 的话，默认值为
 '.'，除非来源的主要名字符合 '.' 里的某个文件；在这种情况下，文件
 差异将会直接应用至该文件去。

有效选项：

 -r [--revision] arg      : ARG (一些命令需要 ARG1:ARG2 )
                           修订版参数可以是：
                               数字      修订版号
                               "{" 日期 "}" 在指定时间以后的修订版date
                               "HEAD"      最近的档案库
                               "BASE"      基线，基于修订版的工作条目
                               "COMMITTED"  最后提交或基线之前
                               "PREV"      修订版提交之前
 -N [--non-recursive]    : 只在单个目录操作
 -q [--quiet]            : 打印尽可能少
 --force                  : 强制操作运行
 --dry-run                : 尝试操作但不修改
 --diff3-cmd arg          : 使用 ARG 作为合并命令
 --ignore-ancestry        : 合并时忽略原始信息
 --username arg          : 指定用户 ARG
 --password arg          : 指定密码 ARG
 --no-auth-cache          : 不要缓冲用户验证
 --non-interactive        : 不要交互提示
 --config-dir arg        : 从目录 ARG 读取用户配置文件  

]]>
	</screen>
	</section>
	<section>
	<title>
	开发人员常用命令
	</title>
	<screen>
<![CDATA[
(1) 导入项目

$ cd ~/project $ mkdir -p svntest/{trunk,branches,tags} $ svn import svntest https://localhost/test/svntest --message "Start project" ... $ rm -rf svntest

我们新建一个项目svntest，在该项目下新建三个子目录：trunk，开发主干；branches，开发分支；tags，开发阶段性标签。然后导入到版本库test下，然后把svntest拿掉。

(2) 导出项目

$ svn checkout https://localhost/test/svntest/trunk

修订版本号的指定方式是每个开发人员必须了解的，以下是几个参考例子，说明可参考svn推荐书。

$ svn diff --revision PREV:COMMITTED foo.c

# shows the last change committed to foo.c


$ svn log --revision HEAD

# shows log message for the latest repository commit


$ svn diff --revision HEAD

# compares your working file (with local changes) to the latest version

# in the repository


$ svn diff --revision BASE:HEAD foo.c

# compares your “pristine” foo.c (no local changes) with the

# latest version in the repository


$ svn log --revision BASE:HEAD

# shows all commit logs since you last updated


$ svn update --revision PREV foo.c

# rewinds the last change on foo.c

# (foo.c's working revision is decreased)


$ svn checkout --revision 3

# specified with revision number


$ svn checkout --revision {2002-02-17} $ svn checkout --revision {15:30} $ svn checkout --revision {15:30:00.200000} $ svn checkout --revision {"2002-02-17 15:30"} $ svn checkout --revision {"2002-02-17 15:30 +0230"} $ svn checkout --revision {2002-02-17T15:30} $ svn checkout --revision {2002-02-17T15:30Z} $ svn checkout --revision {2002-02-17T15:30-04:00} $ svn checkout --revision {20020217T1530} $ svn checkout --revision {20020217T1530Z} $ svn checkout --revision {20020217T1530-0500}

(3) 日常指令

$ svn update


$ svn add foo.file

$ svn add foo1.dir

$ svn add foo2.dir --non-recursive

$ svn delete README

$ svn copy foo bar

$ svn move foo1 bar1


$ svn status

$ svn status --verbose

$ svn status --verbose --show-updates

$ svn status stuff/fox.c


$ svn diff

$ svn diff > patchfile


$ svn revert README

$ svn revert


修改冲突发生时，会生成三个文件：.mine, .rOLDREV, .rNEWREV。比如：


$ ls -l

sandwich.txt

sandwich.txt.mine

sandwich.txt.r1

sandwich.txt.r2


解决修改冲突方式之一：修改冲突的文件sandwich.txt，然后运行命令：

$ svn resolved sandwich.txt


方式之二：用库里的新版本覆盖你的修改：

$ cp sandwich.txt.r2 sandwich.txt

$ svn resolved sandwich.txt


方式之三：撤销你的修改，这种方式不需要运行resolved子命令:

$ svn revert sandwich.txt

Reverted 'sandwich.txt'

$ ls sandwich.*

sandwich.txt


确保没问题后，就可以提交了。

$ svn commit --message "Correct some fatal problems"

$ svn commit --file logmsg

$ svn commit


(4) 检验版本历史

$ svn log

$ svn log --revision 5:19

$ svn log foo.c

$ svn log -r 8 -v


$ svn diff

$ svn diff --revision 3 rules.txt

$ svn diff --revision 2:3 rules.txt

$ svn diff --revision 4:5 http://svn.red-bean.com/repos/example/trunk/text/rules.txt


$ svn cat --revision 2 rules.txt

$ svn cat --revision 2 rules.txt > rules.txt.v2


$ svn list http://svn.collab.net/repos/svn

$ svn list --verbose http://svn.collab.net/repos/svn


$ svn checkout --revision 1729 # Checks out a new working copy at r1729

…

$ svn update --revision 1729 # Updates an existing working copy to r1729

…


(5) 其他有用的命令


svn cleanup


为失败的事务清场。


(6) 分支和合并

建立分支方法一：先checkout然后做拷贝，最后提交拷贝。

$ svn checkout http://svn.example.com/repos/calc bigwc

A bigwc/trunk/

A bigwc/trunk/Makefile

A bigwc/trunk/integer.c

A bigwc/trunk/button.c

A bigwc/branches/

Checked out revision 340.


$ cd bigwc

$ svn copy trunk branches/my-calc-branch

$ svn status

A + branches/my-calc-branch


$ svn commit -m "Creating a private branch of /calc/trunk."

Adding branches/my-calc-branch

Committed revision 341.


建立分支方法二：直接远程拷贝。


$ svn copy http://svn.example.com/repos/calc/trunk \

http://svn.example.com/repos/calc/branches/my-calc-branch \

-m "Creating a private branch of /calc/trunk."


Committed revision 341.


建立分支后，你可以把分支checkout并继续你的开发。

$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch


假设你已经checkout了主干，现在想切换到某个分支开发，可做如下的操作：

$ cd calc

$ svn info | grep URL

URL: http://svn.example.com/repos/calc/trunk

$ svn switch http://svn.example.com/repos/calc/branches/my-calc-branch

U integer.c

U button.c

U Makefile

Updated to revision 341.

$ svn info | grep URL

URL: http://svn.example.com/repos/calc/branches/my-calc-branch


合并文件的命令参考：

$ svn diff -r 343:344 http://svn.example.com/repos/calc/trunk

$ svn merge -r 343:344 http://svn.example.com/repos/calc/trunk

$ svn commit -m "integer.c: ported r344 (spelling fixes) from trunk."

$ svn merge -r 343:344 http://svn.example.com/repos/calc/trunk my-calc-branch

$ svn merge http://svn.example.com/repos/branch1@150 \

http://svn.example.com/repos/branch2@212 \

my-working-copy


$ svn merge -r 100:200 http://svn.example.com/repos/trunk my-working-copy

$ svn merge -r 100:200 http://svn.example.com/repos/trunk

$ svn merge --dry-run -r 343:344 http://svn.example.com/repos/calc/trunk


最后一条命令仅仅做合并测试，并不执行合并操作。


建立标签和建立分支没什么区别，不过是拷贝到不同的目录而已。

$ svn copy http://svn.example.com/repos/calc/trunk \

http://svn.example.com/repos/calc/tags/release-1.0 \

-m "Tagging the 1.0 release of the 'calc' project."


$ ls

my-working-copy/

$ svn copy my-working-copy http://svn.example.com/repos/calc/tags/mytag

Committed revision 352.


后一种方式直接把本地的工作拷贝复制为标签。


此外，你还可以删除某个分支。

$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \

-m "Removing obsolete branch of calc project." 
]]>
	</screen>
	</section>
	<section>
	<title>
	管理人员常用命令
	</title>
	<screen>
<![CDATA[
(7) 版本库管理

$ svnadmin help ... $ svnadmin help create ... $ svnadmin create --fs-type bdb /usr/local/repository/svn/test $ chown -R svn.svn /usr/local/repository/svn/test


建立版本库，库类型为bdb（使用Berkeley DB做仓库），库名称为test。

svn版本库有两种存储方式：基于Berkeley DB(bdb)或者基于文件系统(fsfs)，通过 --fs-type可指定存储方式。


(8) 查询版本库信息


$ svnlook help

...

$ svnlook help tree

...

$ svnlook tree /usr/local/repository/svn/test --show-ids 
]]>
	</screen>
	</section>
	<section>
	<title>
	其他
	</title>
	<screen>
版本比较：svn diff -r PREV:HEAD file_name 
	</screen>
	</section>
     </section>
  </chapter>

  <chapter>
    <title>FastCGI</title>

    <para>FastCGI 像是一个常驻 (long-live) 型的 CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去 fork 一次 (这是 CGI 最为人诟病的 fork-and-execute 模式)。</para>

	<section>
	<title>
	spawn-fcgi
	</title>
	<screen>
<![CDATA[
spawn-fcgi是一个通用的FastCGI管理服务器

她是lighttpd中的一部份，但目前已经单独成为一个项目，最新的lighttpd没有这一块，但可以在以前版本中找到她

在lighttpd-1.4.15（ http://www.lighttpd.net/download/lighttpd-1.4.15.tar.gz ）中就有她
]]>
<note>注：最新的spawn-fcgi可以到lighttpd.net网站搜索“spawn-fcgi”找到她的最新版本发布地址

目前她的下载地址是http://redmine.lighttpd.net/news/2 最新版本是http://www.lighttpd.net/download/spawn-fcgi-1.6.0.tar.gz
</note>
<![CDATA[

tar -zxvf lighttpd-1.4.15.tar.gz
cd lighttpd-1.4.15
./configure #编译
make  #因为我不需要安装lighttp而是只需要他其中的某个文件，所以只make就可以了，不需要make install
cp src/spawn-fcgi /usr/local/bin/spawn-fcgi  #取出spawn-fcgi的程序


下面我们就可以使用 spawn-fcgi 来控制php-cgi的FastCGI进程了

/usr/local/bin/spawn-fcgi -a 127.0.0.1 -p 9000 -C 5 -u www-data -g www-data -f /usr/bin/php-cgi


参数含义如下

 -f <fcgiapp> 指定调用FastCGI的进程的执行程序位置，根据系统上所装的PHP的情况具体设置
 -a <addr> 绑定到地址addr
 -p <port> 绑定到端口port
 -s <path> 绑定到unix socket的路径path
 -C <childs> 指定产生的FastCGI的进程数，默认为5（仅用于PHP）
 -P <path> 指定产生的进程的PID文件路径
 -u和-g FastCGI使用什么身份（-u 用户 -g 用户组）运行，Ubuntu下可以使用www-data，其他的根据情况配置，如nobody、apache等

]]>
	</screen>
	</section>
	<section>
	<title>
	php-fpm
	</title>
	<screen>
<![CDATA[
她同样也是一个PHP FastCGI管理服务器，是只用于PHP的

可以在 http://php-fpm.org/download 下载得到

她是PHP源代码的一个补丁，必须将她patch到你的PHP源代码中，在编译安装PHP后才可以使用


安装方法类似：

tar zxvf php-5.2.10.tar.gz

gzip -cd php-5.2.10-fpm-0.5.11.diff.gz | patch -d php-5.2.10 -p1

cd php-5.2.10/

./configure --prefix=/usr/local/webserver/php \
--with-config-file-path=/usr/local/webserver/php/etc \
--with-mysql=/usr/local/webserver/mysql \
--with-mysqli=/usr/local/webserver/mysql/bin/mysql_config \
--with-iconv-dir=/usr/local \
--with-freetype-dir \
--with-jpeg-dir \
--with-png-dir \
--with-zlib \
--with-libxml-dir=/usr \
--enable-xml \
--disable-rpath \
--enable-discard-path \
--enable-safe-mode \
--enable-bcmath \
--enable-shmop \
--enable-sysvsem \
--enable-inline-optimization \
--with-curl \
--with-curlwrappers \
--enable-mbregex \
--enable-fastcgi \
--enable-fpm \
--enable-force-cgi-redirect \
--enable-mbstring \
--with-mcrypt \
--with-gd \
--enable-gd-native-ttf \
--with-openssl \
--with-mhash \
--enable-pcntl \
--enable-sockets \
--with-ldap \
--with-ldap-sasl \
--with-xmlrpc \
--enable-zip \
--enable-soap \
--without-pear

make ZEND_EXTRA_LIBS='-liconv'
make install

cp php.ini-dist /usr/local/webserver/php/etc/php.ini
cd ../

]]>
	</screen>
	</section>
	<section>
	<title>
	推荐阅读
	</title>
	<screen>
<![CDATA[
http://www.laruence.com/2009/07/28/1030.html Linux上配置Nginx+PHP5(FastCGI) | 风雪之隅:

http://www.dbanotes.net/web/php_fastcgi_phpfpm.html PHP FastCGI 进程管理器: PHP-FPM - DBA Notes: 
]]>
	</screen>
	</section>
  </chapter>
  <chapter>
	<title>
	PHP
	</title>
	<section>
	<title>
	Installation
	</title>
		<section>
		<title>
		for Apache
		</title>
			<screen>

<![CDATA[
./configure --prefix=/usr/local/php-5.2.11 \
--with-config-file-path=/usr/local/php-5.2.11/etc \
--with-apxs2=/usr/local/apache/bin/apxs \
--with-curl \
--with-gd \
--with-ldap \
--with-snmp \
--with-iconv \
--with-zlib-dir \
--with-pear \
--with-mysql=../mysql-5.1.41-linux-x86_64-icc-glibc23 \
--with-mysqli \
--with-pdo-mysql \
--with-libxml-dir \
--with-xmlrpc \
--enable-zip \
--enable-exif \
--enable-sockets \
--enable-soap

make
make test
make install



-- CGI方式 --
httpd.conf

  ScriptAlias /php/ "C:/Program Files/php-5.2.10/"
  AddType application/x-httpd-php .php
  Action application/x-httpd-php "/php/php-cgi.exe"
  AddType application/x-httpd-php .html

  注意,如果安装后出现You don't have permission to access / on this server.
  或者出现无法运行php文件的情况下
  查找httpd.conf中的
  Deny from all
  改为
  Allow from all


  注意：You don't have permission to access /php/php-cgi.exe/index.php on this server.

  网上搜索了好多，不少人都有这个问题。后来在一个nl后缀的网站上提到了权限的问题。 

  添了一个

  <Directory "d:/www/php524">

      Order deny,allow
      Deny from none

  </Directory> 

  就可以了，其中Deny from none还可以改为 Allow from all。终于解决了php-cgi安装方式的问题。 


php.ini

  如果使用CGI模式，请修改php.ini的设置： cgi.force_redirect = 1，以增强apache的安全性，



-- Module方式--
httpd.conf

	LoadModule php5_module "C:/Program Files/php-5.2.10/php5apache2_2.dll"
	PHPIniDir "C:/Program Files/php-5.2.10/"
	AddType application/x-httpd-php .php
	AddType application/x-httpd-php .html


]]>




	
			</screen>
		</section>
		<section>
			<title>
			for Lighttpd
			</title>
			<screen>
<![CDATA[
1. 下载PHP

      cd /usr/local/src/
      wget http://cn2.php.net/get/php-5.2.3.tar.bz2/from/cn.php.net/mirror
      tar jxvf php-5.2.3.tar.bz2
      cd php-5.2.3

2. configure

      ./configure --prefix=/usr/local/php-5.2.3 \
      --with-config-file-path=/usr/local/php-5.2.3/etc \
      --enable-fastcgi \
      --enable-force-cgi-redirect \
      --with-curl \
      --with-gd \
      --with-ldap \
      --with-snmp \
      --enable-zip \
      --enable-exif \
      --with-pdo-mysql \
      --with-pdo-pgsql \

      make
      make test
      make install
      				

      其它有用的模块

      --enable-pcntl

3. 符号连接

      ln -s /usr/local/php-5.2.3 /usr/local/php
      ln -s /usr/local/php/bin/php /usr/local/bin/php

4. php.ini

      cp php.ini-dist /usr/local/php/etc/php.ini

5. env

      PHP_FCGI_CHILDREN=384

6. 使用 php -v FastCGI 安装情况

      php -v 或 php-cgi -v

      显示(cgi-fcgi)表示正确

      # cd /usr/local/php/
      # bin/php -v
      PHP 5.2.2 (cgi-fcgi) (built: May 25 2007 15:50:28)
      Copyright (c) 1997-2007 The PHP Group
      Zend Engine v2.2.0, Copyright (c) 1998-2007 Zend Technologies
      				

      (cgi-fcgi)不能正常工作

      PHP 5.2.2 (cli) (built: May 25 2007 15:50:28)
      Copyright (c) 1997-2007 The PHP Group
      Zend Engine v2.2.0, Copyright (c) 1998-2007 Zend Technologies
      				

      使用 php -m 或php-cgi -m 查看PHP Modules

      # bin/php -m
      [PHP Modules]
      cgi-fcgi
      ctype
      date
      dom
      filter
      gd
      hash
      iconv
      json
      ldap
      libxml
      mssql
      pcre
      PDO
      pdo_mysql
      pdo_sqlite
      posix
      Reflection
      session
      SimpleXML
      snmp
      SPL
      SQLite
      standard
      tokenizer
      xml
      xmlreader
      xmlwriter
      zip

      [Zend Modules]
      				

apt-get install

$ sudo apt-get install php5 php5-cli php5-cgi

]]>		
			</screen>
		
		</section>
	</section>
	<section>
		<title>
		APC Cache
		</title>
		<screen>
<![CDATA[
PHP语言是一个功能强大的嵌入式HTML脚本语言，很多程序员都在使用这一语言来进行网站的创建。PHP APC,全称是Alternative PHP Cache,官方翻译叫”可选PHP缓存”,但我个人觉得应该叫”另一个PHP缓存”。因为这个东西如果叫”可选PHP缓存”,容易给人一种可要可不要的,不怎么有用的错觉。

APC的主页是:http://pecl.php.net /package/apc.目前的版本是3.0.14,通过PECL安装,需要php4.3.0或更高版本.

PHP APC的安装: 一般是下载源代码然后phpize来编译安装,安装完以后在加上php.ini里加上 extension=apc.so 这么一行就行了.

PHP APC的使用： APC的使用其实倒说不上.APC是个优化器,自安装之日起,就默默地在后台为您的PHP应用服务了.您的所有PHP代码会被缓存起来. 另外,APC可提供一定的内存缓存功能.但是这个功能并不是十分完美,有报告说如果频繁使用APC缓存的写入功能,会导致不可预料的错误.如果想使用这个功能,可以看看apc_fetch,apc_store等几个与apc缓存相关的函数. 从PHP5.2开始,APC引入了一个小甜饼,解决了困扰大家已久的大文件上传的进度条问题.

PHP APC的高级使用

1.缓存期限: APC的缓存分两部分:系统缓存和用户数据缓存. 系统缓存 是自动使用的,是指APC把PHP文件源码的编译结果缓存起来,然后在再次调用时先对比时间标记。如果未过期,则使用缓存代码运行。默认缓存 3600s(一小时).但是这样仍会浪费大量CPU时间.因此可以在php.ini中设置system缓存为永不过期(apc.ttl=0).不过如果这样设置,改运php代码后需要restart一下您的web服务器(比如apache…).目前对APC的性能测试一般指的是这一层cache;

用户数据缓存由用户在编写php代码时用apc_store和apc_fetch函数操作读取、写入的.如果量不大的话我建议可以使用一下.如果量大,我建议使用 memcache会更好. 如果要享受APC带来的缓存大文件上传进度的特性,需要在php.ini中将apc.rfc1867设为1,并且在表单中加一个隐藏域 APC_UPLOAD_PROGRESS,这个域的值可以随机生成一个hash,以确何唯一.具体例子请参见前面给出的链接.

2.状态控制和分析: PHP APC的源码包自带了一个apc.php;您可以将这个文件上传到web服务器的某个目录下,用浏览器访问,这会显示当前的状态.我们可以从这里的表格分析当前的缓存状况,作出进一步优化. apc-info-clublocalhost2.png 这是某test站点的状态.您可以慢慢分析,这个工具会提供很多有用的工具.比如您可以看到哪些文件经常被包含(访问),您缓存的哪个变量经常被读取,或经常被更新等. 最后顺便提一句,有独立报告说,PHP APC的代码缓存、优化效果要高出zend优化器.就算不是真的,他开源而又免费,实在是一个相当不错的选择 
]]>
		</screen>
		<section>
			<title>
			安装
			</title>
			<screen>
<![CDATA[
-- 下载地址 --

http://pecl.php.net/get/APC-3.0.19.tgz

http://pecl.php.net/get/APC-3.1.3.tgz


-- Windows下安装 --
php_apc.dll

php_apc.dll下载：apc3.0.17-dev.zip

将php_apc.dll放入 php.ini文件的extension_dir所指定的目录中(extension_dir = "C:\Program Files\php-5.2.10\ext")

PHP.INI

在PHP.INI文件里加入如下

extension=php_apc.dll

apc.rfc1867 = on
apc.max_file_size = 200M
upload_max_filesize = 200M
post_max_size = 200M

apc.enabled = 1
apc.cache_by_default = on
apc.shm_segments = 1
apc.shm_size = 32
apc.ttl = 600
apc.user_ttl = 600
apc.num_files_hint = 0
apc.write_lock = On

-- Linux下安装 --

编译SO文件

apc 安装下了最新的APC-3.0.19.tgz，解压，进入目录

apc下载地址

http://pecl.php.net/package/APC

# tar -zxvf APC-3.0.19.tgz

# cd APC-3.0.19

# /usr/local/php/bin/phpize （生产configure文件）

如果这一步发生错误，请看这里：

#/usr/local/php/bin/phpize

Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519
Cannot find autoconf. Please check your autoconf installation and the $PHP_AUTOCONF
environment variable is set correctly and then rerun this script.

通过安装 autoconf 可以解决
centos下执行 yum install autoconf即可



# ./configure --enable-apc --enable-apc-mmap --with-php-config=/usr/local/php/bin/php-config

# make

# make install


拷贝添加SO文件

# cp /usr/local/lib/php/extensions/no-debug-zts-20060613/apc.so /usr/local/php/lib/php/extensions/apc.so

# chmod 755 /usr/local/php/lib/php/extensions/apc.so


修改PHP.INI使之启动APC模块

修改 php.ini下

extension_dir = "./"

extension_dir = "/usr/local/php/lib/php/extensions"

配置/etc/php.ini 末尾加入

extension=apc.so

apc.enabled = 1

apc.cache_by_default = on

apc.shm_segments = 1

apc.shm_size = 128

apc.ttl = 7200

apc.user_ttl = 7200

apc.num_files_hint = 1024

apc.write_lock = On

apc.gc_ttl=3600

apc.ttl=0

apc.mmap_file_mask=/tmp/apc.XXXXXX


重启webservice 
]]>			
			</screen>
		</section>
		<section>
			<title>
			更多阅读链接
			</title>
			<screen>
<![CDATA[
http://developer.51cto.com/art/200912/166132.htm PHP APC的安装与高级使用 
]]>
			</screen>
		</section>
	</section>
	<section>
		<title>
		Memcache
		</title>
		<screen>
<![CDATA[
目前全世界很多人使用这个缓存项目来构建自己的大负载网站，来分担数据库的压力。
]]>
		</screen>
		
	</section>
	<section>
		<title>
		Zend Optimizer
		</title>
		<section>
			<title>
			安装
			</title>
			<screen>
<![CDATA[
Linux

1. 下载

到http://www.zend.com 下载 zend optimizer for linux包


2. 解压

tar -zxvf ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz


3. 把动态连接库文件拷贝到PHP的扩展文件夹里

cp -rf ZendOptimizer-3.3.9-linux-glibc23-i386/data/<根据PHP版本有不同的文件夹>/ZendOptimizer.so /usr/local/php/lib/php/extensions/


4. 修改PHP.INI文件

vim /usr/local/php/etc/php.ini

加入下面文字:
;-------------------------
[Zend_Optimizer]

;优化器所在目录
zend_extension=/usr/local/php/lib/php/extensions/ZendOptimizer.so

;优化程度，这里定义启动多少个优化过程
zend_optimizer.optimization_level=1023

;是否允许处理由Zend Encoder加密的PHP文件,默认就是1
zend_optimizer.encoder_loader=1
;-------------------------

5. 重新启动webservice 
]]>
			</screen>
		</section>
		<section>
			<title>
			配置项说明
			</title>
			<screen>
<![CDATA[
zend_optimizer.optimization_level 优化程度，这里定义启动多少个优化过程。

zend_optimizer.encoder_loader 是否允许处理由Zend Encoder加密的PHP文件。

zend_extension 优化器所在目录。


zend_optimizer.optimization_level

优化过程

这里最为重点的部分，仔细看！Zend Opt总共有10个优化过程，从理论上说开的越多性能越好。当然，理论和实际永远都存在着差距。优化过程开启的越多对性能消耗也相对也越大，Zend Opt的10个优化过程并不相同也就是说效果不是平均的。Zend公司定义的最高值(High模式)为15，这里15指的是开启1-4号优化过程。当然，很多朋友并不满足于此，毕竟最高也只开启4个优化过程连总数的一半都没有。各个优化过程的对应的数字代码（值）如下：

不使用      0  <= 如果这样不如不装，还能节约点内存说！
优化过程1(PASS1) 1
优化过程2(PASS2) 2
优化过程3(PASS3) 4
优化过程4(PASS4) 8
优化过程5(PASS5) 16
优化过程6(PASS6) 32
优化过程7(PASS7) 64
优化过程8(PASS8) 128
优化过程9(PASS9) 256
优化过程10(PASS10) 512

以何种方式开启优化过程是通过这些数字代码（值）相加所得的和作为此参数的参数值来控制的。如我的配置文件中 zend_optimizer.optimization_level = 1023 ，这里的1023是优化过程1到优化过程10全部数字代码（值）相加得到的和，表示开启全部10个优化过程。刚才所提到的Zend公司定义的High模式值为15，15表示同时开启优化过程1-4。


zend_optimizer.encoder_loader

加密代码支持

对于这个参数，我想如果没有看过Zend Opt FAQ文档的朋友大多数并不知道。这个参数用来告诉Zend Opt是否去支持被Zend Encoder加密过的代码。默认情况下Zend Opt将支持加密过的代码。如果不使用被加密过的代码我推荐你关闭此选项。这个功能牵扯到解包反码的过程，会导致系统负荷的加重。我的朋友已经开发完毕相应的反编译工具，预计春节之后推出。

这个参数的值只有两个 0 关闭， 1 开启。默认为1，推荐设置为0。


zend_extension

模块定位

这是最简单的地方，参数就是Zend Opt模块在硬盘上的安装路径。 
]]>
			</screen>
		</section>
		<section>
			<title>
			问题和解决方法
			</title>
			<screen>
<![CDATA[
安装后Zend Optimizer没有启用

(这个解决方法同样可以解决其他的 .so 文件无法载入和启动的问题)

安装后,在phpinfo()函数中的“This program makes use of the Zend Scripting Language Engine:”中没有显示启用了Zend Optimizer

/usr/local/php/bin/php-cgi -i|grep Optimizer 发现Zend Optimizer的状态是失败的，并且提示“cannot restore segment prot after reloc: Permission denied”

这是SELinux在使坏，有两个解决的方法：

        1. 使用chcon 命令 
        示例: chcon -t texrel_shlib_t /usr/local/php/lib/php/extensions/ZendOptimizer.so 
        2. 禁止掉SELinux 
        更改/etc/sysconfig/selinux 文件的内容为 SELINUX=disabled 


]]>
			</screen>
		</section>
	</section>
	<section>
		<title>
		phpzie
		</title>
		<screen>
<![CDATA[
phpize 命令是用来准备 PHP 扩展库的编译环境的。

如果你的PHP不支持mysql、pdo、mbstring这样的扩展库的话，可以没有必要重新编译PHP，直接使用phpize进行添加编译就可以了 
]]>
		</screen>
		<section>
			<title>
			如何使用 
			</title>
			<screen>
<![CDATA[
-- 进入要安装的扩展包的源代码目录 --

(拿APC为例)

# cd /usr/local/src/APC-3.0.19

-- 运行phpzie，生成configure文件 --

# /usr/local/php/bin/phpzie
]]>
<note>
如果这一步发生错误，请看这里。如果没有，请跳过：

# /usr/local/php/bin/phpize

Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519
Cannot find autoconf. Please check your autoconf installation and the $PHP_AUTOCONF
environment variable is set correctly and then rerun this script.

通过安装 autoconf 可以解决
centos下执行 yum install autoconf即可
</note>
<![CDATA[

-- 开始编译扩展包 --

# ./configure --enable-apc --enable-apc-mmap --with-php-config=/usr/local/php/bin/php-config

# make

# make install 



-- 拷贝添加SO文件 --

# cp /usr/local/lib/php/extensions/no-debug-zts-20060613/apc.so /usr/local/php/lib/php/extensions/apc.so

# chmod 755 /usr/local/php/lib/php/extensions/apc.so


-- 修改PHP.INI使之启用刚才编译的模块 --

修改 php.ini下

extension_dir = "./"

extension_dir = "/usr/local/php/lib/php/extensions"

配置/etc/php.ini 末尾加入

(此步用于APC 其他扩展按具体情况而定)

extension=apc.so

apc.enabled = 1

apc.cache_by_default = on

apc.shm_segments = 1

apc.shm_size = 128

apc.ttl = 7200

apc.user_ttl = 7200

apc.num_files_hint = 1024

apc.write_lock = On

apc.gc_ttl=3600

apc.ttl=0

apc.mmap_file_mask=/tmp/apc.XXXXXX


重启webservice 


完成 
]]>
			</screen>
		</section>
		<section>
			<title>
			官方解释
			</title>
			<screen>
<![CDATA[
用 phpize 编译共享 PECL 扩展库

http://docs.php.net/manual/zh/install.pecl.phpize.php 用 phpize 编译共享 PECL 扩展库


有时候不能用 pear 安装命令。这可能是因为在防火墙后面，或者是因为想要安装的扩展库还没有 PEAR 兼容的包，例如 CVS 中尚未发布的扩展库。如果要编译这种扩展库，可以用更底层的编译工具来手工进行编译。

phpize 命令是用来准备 PHP 扩展库的编译环境的。下面例子中，扩展库的源程序位于 extname 目录中：

$ cd extname
$ phpize
$ ./configure
$ make
# make install

成功的安装将创建 extname.so 并放置于 PHP 的扩展库目录中。需要调整 php.ini，加入 extension=extname.so 这一行之后才能使用此扩展库。


将 PECL 扩展库静态编译入 PHP

http://docs.php.net/manual/zh/install.pecl.static.php 将 PECL 扩展库静态编译入 PHP


有时可能需要将扩展库静态编译到 PHP 中。这需要将扩展库源程序放入 php-src/ext/ 目录中去并告诉 PHP 编译系统来生成其配置脚本。

$ cd /your/phpsrcdir/ext
$ pear download extname
$ gzip -d < extname.tgz | tar -xvf -
$ mv extname-x.x.x extname

这将产生以下目录：

/your/phpsrcdir/ext/extname

此时强制 PHP 重新生成配置脚本，然后正常编译 PHP：

$ cd /your/phpsrcdir 
$ rm configure 
$ ./buildconf --force 
$ ./configure --help 
$ ./configure --with-extname --enable-someotherext --with-foobar 
$ make 
$ make install

    Note: 要运行“buildconf”脚本，需要 autoconf 2.13 和 automake 1.4+（更新版本的 autoconf 也许能工作，但不被支持）。 

是否用 --enable-extname 或 --with-extname 取决于扩展库。通常不需要外部库文件的扩展库使用 --enable。要确认的话，在 buildconf 之后运行：

$ ./configure --help | grep extname



]]>
			</screen>
		</section>
		<screen>
<![CDATA[
更多阅读链接

http://www.hao32.com/webserver/313.html phpize简介（实例应用） 
]]>
		</screen>
	</section>
	<section>
		<title>
		PHP predefined variables
		</title>
		<screen>
<![CDATA[
PHP预定义变量 解释
]]>
		</screen>
		<section>
			<title>
			$_SERVER
			</title>
			<screen>
<![CDATA[
$_SERVER['PHP_SELF']：当前正在执行脚本的文件名，与document root相关。

$_SERVER['argv']：传递给该脚本的参数。

$_SERVER['argc']：包含传递给程序的命令行参数的个数（如果运行在命令行模式）。

$_SERVER['GATEWAY_INTERFACE']：服务器使用的CGI规范的版本，例如：“CGI/1.1”。

$_SERVER['SERVER_NAME']：当前运行脚本所在服务器主机的名称。

$_SERVER['SERVER_SOFTWARE']：服务器标识的字串，在响应请求时的头部中给出。

$_SERVER['SERVER_PROTOCOL']：请求页面时通信协议的名称和版本，例如：“HTTP/1.0”。

$_SERVER['REQUEST_METHOD']：访问页面时的请求方法，例如：“GET”、“HEAD”、“POST”、“PUT”。

$_SERVER['QUERY_STRING']：查询(query)的字符串。

$_SERVER['DOCUMENT_ROOT']：当前运行脚本所在的文档根目录，在服务器配置文件中定义。

$_SERVER['HTTP_ACCEPT']：当前请求的Accept: 头部的内容。

$_SERVER['HTTP_ACCEPT_CHARSET']：当前请求的Accept-Charset: 头部的内容，例如：“iso-8859-1,*,utf-8”。

$_SERVER['HTTP_ACCEPT_ENCODING']：当前请求的Accept-Encoding: 头部的内容，例如：“gzip”。

$_SERVER['HTTP_ACCEPT_LANGUAGE']：当前请求的Accept-Language: 头部的内容，例如：“en”。

$_SERVER['HTTP_CONNECTION']：当前请求的Connection: 头部的内容，例如：“Keep-Alive”。

$_SERVER['HTTP_HOST']：当前请求的Host: 头部的内容。

$_SERVER['HTTP_REFERER']：链接到当前页面的前一页面的URL地址。

$_SERVER['HTTP_USER_AGENT']：当前请求的User_Agent: 头部的内容。

$_SERVER['REMOTE_ADDR']：正在浏览当前页面用户的IP地址。

$_SERVER['REMOTE_HOST']：正在浏览当前页面用户的主机名。

$_SERVER['REMOTE_PORT']：用户连接到服务器时所使用的端口。

$_SERVER['SCRIPT_FILENAME']：当前执行脚本的绝对路径名。

$_SERVER['SERVER_ADMIN']：管理员信息。

$_SERVER['SERVER_PORT']：服务器所使用的端口。

$_SERVER['SERVER_SIGNATURE']：包含服务器版本和虚拟主机名的字符串。

$_SERVER['PATH_TRANSLATED']：当前脚本所在文件系统（不是文档根目录）的基本路径。

$_SERVER['SCRIPT_NAME']：包含当前脚本的路径，这在页面需要指向自己时非常有用。

$_SERVER['REQUEST_URI']：访问此页面所需的URI，例如：“/index.html”。

$_SERVER['PHP_AUTH_USER']：当PHP运行在Apache模块方式下，并且正在使用HTTP认证功能，这个变量便是用户输入的用户名。

$_SERVER['PHP_AUTH_PW']：当PHP运行在Apache模块方式下，并且正在使用HTTP认证功能，这个变量便是用户输入的密码。

$_SERVER['AUTH_TYPE']：当PHP运行在Apache模块方式下，并且正在使用HTTP认证功能，这个变量便是认证的类型。 
]]>
			</screen>
		</section>
	</section>
	<section>
		<title>
		SOAP from PHP
		</title>
		<para>
简单对象访问协议（SOAP，全写为Simple Object Access Protocol）是一种标准化的通讯规范，主要用于Web服务（web service）中。SOAP的出现是为了简化网页服务器（Web Server）在从XML数据库中提取数据时，无需花时间去格式化页面，并能够让不同应用程序之间透过HTTP通讯协定，以XML格式互相交换彼此的数据，使其与编程语言、平台和硬件无关。此标准由IBM、Microsoft、UserLand和DevelopMentor在1998年共同提出，并得到 IBM，莲花（Lotus），康柏（Compaq）等公司的支持，于2000年提交给万维网联盟（World Wide Web Consortium；W3C），目前 SOAP 1.1 版是业界共同的标准，属于第二代的XML协定（第一代具主要代表性的技术为XML-RPC以及WDDX）。
		</para>
		<para>
用一个简单的例子来说明 SOAP 使用过程，一个 SOAP 消息可以发送到一个具有 Web Service 功能的 Web 站点，例如，一个含有房价信息的数据库，消息的参数中标明这是一个查询消息，此站点将返回一个 XML 格式的信息，其中包含了查询结果（价格，位置，特点，或者其他信息）。由于数据是用一种标准化的可分析的结构来传递的，所以可以直接被第三方站点所利用。
		</para>
		<para>
   * SOAP封装（envelop），封装定义了一个描述消息中的内容是什么，是谁发送的，谁应当接受并处理它以及如何处理它们的框架；
		</para>
		<para>
   * SOAP编码规则（encoding rules），用于表示应用程序需要使用的数据类型的实例；
		</para>
		<para>
   * SOAP RPC表示（RPC representation），表示远程过程调用和应答的协定；
		</para>
		<para>
   * SOAP绑定（binding），使用底层协议交换信息。

		</para>
	
		<section>
			<title>
			PHP安装SOAP扩展
			</title>
			<screen>
<![CDATA[
1.安装php-soap:
yum install php-soap -y

2.在PHP的编译参数中加入--enable-soap，如： 
------
./configure --prefix=/usr/local/php-5.2.12 \
	--with-config-file-path=/usr/local/php-5.2.12/etc \
	--enable-fastcgi --enable-force-cgi-redirect --with-curl \
	--with-gd --with-ldap --with-snmp --enable-zip --enable-exif \
	--with-pdo-mysql --with-mysql --with-mysqli \
--enable-soap
------
]]>
			</screen>
		</section>
		<section>
			<title>
			PHP建立SOAP服务器
			</title>
			<section>
				<title>
				建立函数文件
				</title>
				<screen>
				<![CDATA[
这里我们建立一个soap_function.php的文件，用于定义公开给请求的调用的函数

 * file name:soap_function.php 
------

<?php

function get_str($str){
        return 'hello '.$str;

}

function add_number($n1,$n2){
        return $n1+$n2;

}

?>

------
				]]>
				</screen>
			</section>
			<section>
				<title>
				建立服务，注册函数 
				</title>
				<screen>
				<![CDATA[
有了上步操作，我们还要建立一个SOAP服务并且将定义好的函数注册到服务中

 * file name:soap_service.php 
------

<?php

include_once('soap_function.php');//导入函数文件

$soap = new SoapServer(null,array('uri'=>'http://zenw.org')); //建立SOAP服务实例
$soap->addFunction('get_str');
$soap->addFunction('sum_number');
//或者可以 $soap->addFunction(array('get_str','sum_number'));

$soap->addFunction(SOAP_FUNCTIONS_ALL); //常量SOAP_FUNCTIONS_ALL的含义在于将当前脚本所能访问的所有function（包括一些系统function）都注册到服务中
$soap->handle(); //SoapServer对象的handle方法用来处理用户输入并调用相应的函数，最后返回

?>

------
到这里，一个SoapServer就搭建好了，剩下的就是如何请求她了
				]]>
				</screen>
			</section>
		</section>
		<section>
			<title>
			PHP建立SOAP客户端请求
			</title>
			<screen>
			<![CDATA[
 *  file name:soap_client.php 
------

<?php

$client = new SoapClient(null,array('location'=>"http://192.168.3.229/soap/soap_service.php", //在SOAP服务器建立环节中建立的soap_service.php的URL网络地址
                                    'uri'=>'http://zenw.org'));

$str = 'zenwong';

echo "get str is :".$client->get_str($str);
echo "<br />";
echo 'sun number is:'.$client->sun_number(9,18);

?>

------
			]]>
			</screen>
		</section>
	</section>
  </chapter>
</book>

